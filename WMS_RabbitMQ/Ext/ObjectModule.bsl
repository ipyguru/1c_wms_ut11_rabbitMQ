// Выгружается в GIT
// C:\Users\1cadmin\Documents\WMS\Git\WMS_Rabbit
//
#Область Служебные

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "1.0.0";
	ПараметрыРегистрации.Информация = "1.0.0";
	ПараметрыРегистрации.Наименование = "Обмен с WMS";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Обмен с WMS'");
	Команда.Идентификатор = "Открытие_Формы";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.ПоказыватьОповещение = Истина;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Выполнить обмен'");
	Команда.Идентификатор = "ВыполнитьОбмен";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.ПоказыватьОповещение = Истина;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Отправить ошибки ЖР'");
	Команда.Идентификатор = "ОтправитьОшибкиЖР";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.ПоказыватьОповещение = Истина;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'ИсправитьПартнеров'");
	Команда.Идентификатор = "ИсправитьПартнеров";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.ПоказыватьОповещение = Истина;
	
	Возврат ПараметрыРегистрации; 
	
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	// Реализация логики команды
	ЗагрузитьНастройки();
	
	Если ИдентификаторКоманды = "ВыполнитьОбмен" Тогда
		
		Если Не ЗначениеЗаполнено(Узел) Тогда
			Возврат;
		КонецЕсли;
		
		// Загрузка
		ИменаОчередейДляЗагрузки = Узел.ИменаОчередей_RabbitMQ.НайтиСтроки(
				Новый Структура(
					"НаправлениеОбмена, Активность",
					Перечисления.WMS_НаправлениеОбмена.Загрузка,
					Истина
				)
			);
			
		Для Каждого Очередь Из ИменаОчередейДляЗагрузки Цикл
			ЗагрузитьОчередьСообщений(Очередь);
		КонецЦикла; 
		
		// Выгрузка
		ИменаОчередейДляВыгрузки = Узел.ИменаОчередей_RabbitMQ.НайтиСтроки(
				Новый Структура(
					"НаправлениеОбмена, Активность",
					Перечисления.WMS_НаправлениеОбмена.Выгрузка,
					Истина
				)
			);
			
		Для каждого Очередь Из ИменаОчередейДляВыгрузки Цикл
			ВыгрузитьОчередьСообщений(Очередь);
		КонецЦикла;
		
	ИначеЕсли ИдентификаторКоманды = "ОтправитьОшибкиЖР" Тогда
		ОтправитьОшибкиЖРНаПочту();
		
	ИначеЕсли ИдентификаторКоманды = "ИсправитьПартнеров" Тогда
		ИсправитьПартнеров();

		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область Настройки

Процедура ЗагрузитьНастройки() Экспорт
	
	ИмяПользователя = "Администратор";
	КлючОбъекта  = "WMS_RabbitMQ";
	
	Для Каждого Элемент из ЭтотОбъект.Метаданные().Реквизиты Цикл
		КлючНастроек = Строка(Элемент.Имя);
		Попытка
			Значение = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек,, ИмяПользователя);
			Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") тогда
				ЭтотОбъект[Элемент.Имя].Загрузить(Значение);
			Иначе
				ЭтотОбъект[Элемент.Имя]=Значение;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого Элемент из ЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
		Если СтрНайти(Элемент.Имя,"WMS_")=0 Тогда 
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) тогда
			КлючНастроек = Строка(ЭтотОбъект[Элемент.Имя]);
			Попытка
				Значение = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта,КлючНастроек,,ИмяПользователя);
				ЭтотОбъект[Элемент.Имя].Загрузить(Значение);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
Конецпроцедуры

Процедура СохранитьНастройки() Экспорт
	
	ИмяПользователя = "Администратор";
	КлючОбъекта  = "WMS_RabbitMQ";
	
	Для Каждого Элемент из ЭтотОбъект.Метаданные().Реквизиты Цикл
		Если значениеЗаполнено(ЭтотОбъект[Элемент.Имя]) тогда
			Попытка
				КлючНастроек = Строка(Элемент.Имя);
				Попытка
					Значение=ЭтотОбъект[Элемент.Имя];
				Исключение
				КонецПопытки;
				ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  КлючНастроек, Значение, , ИмяПользователя);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Элемент из ЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
		Если значениеЗаполнено(ЭтотОбъект[Элемент.Имя]) тогда
			Если  СтрНайти(Элемент.Имя,"WMS_")=0 Тогда 
				КлючНастроек = Строка(ЭтотОбъект[Элемент.Имя]);
				ХранилищеОбщихНастроек.Удалить(КлючОбъекта,  КлючНастроек, ИмяПользователя);
				Продолжить;
			КонецЕсли;
			
			Попытка
				КлючНастроек = Строка(ЭтотОбъект[Элемент.Имя]);
				Попытка
					Значение=ЭтотОбъект[Элемент.Имя].Выгрузить();
				Исключение
				КонецПопытки;
				ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  КлючНастроек, Значение, , ИмяПользователя);
			Исключение
			КонецПопытки;
		Иначе
			КлючНастроек = Строка(ЭтотОбъект[Элемент.Имя]);
			ХранилищеОбщихНастроек.Удалить(КлючОбъекта,  КлючНастроек, ИмяПользователя);
		КонецЕсли;
	КонецЦикла;
	
Конецпроцедуры

#КонецОбласти


#Область RabbitMQ 

Функция НовоеСоединение(Настройки, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли; 

	ФабрикаAMQP = Новый COMОбъект("RabbitMQ.Client.ConnectionFactory");
	ФабрикаAMQP.HostName = Настройки.АдресСервера;
	ФабрикаAMQP.UserName = Настройки.Пользователь;
	ФабрикаAMQP.Password = Настройки.Пароль;
	
	// попытка подключится
	Попытка
		Возврат ФабрикаAMQP.CreateConnection();
	Исключение
		Отказ = Истина;
		ВызватьИсключение(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;

КонецФункции // НовоеСоединение

Функция ПолучитьСообщение(Модель, ИмяОчереди, ТэгДоставки = "")
	
	Если Не Модель.MessageCount(ИмяОчереди) Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	Результат = Модель.BasicGet(ИмяОчереди, false);
	ОтветSafeArray = Результат.Body();
	
	ПараметрыОтвета = Результат.BasicProperties();
	ТэгДоставки = Результат.DeliveryTag;

	UTF8Encoding = Новый COMОбъект("System.Text.UTF8Encoding");
	ТелоСообщения = UTF8Encoding.GetString(ОтветSafeArray);	
		
	Возврат ТелоСообщения;
	
КонецФункции

Процедура ЗагрузитьОчередьСообщений(Очередь) Экспорт
	
	ПроцедураЗагрузки = Новый Соответствие;
	
	// Принудительное обновление номенклатуры
	ПроцедураЗагрузки.Вставить("Номенклатура_Create",                       "СоздатьОбновить_Номенклатуру");
	
	// Основной обмен
	ПроцедураЗагрузки.Вставить("ЗаказПоставщику_Create",                    "СоздатьНайти_ЗаказПоставщику");
	ПроцедураЗагрузки.Вставить("ПоступлениеТоваровУслуг_Create",            "СоздатьНайти_ПоступлениеТоваровУслуг");
	ПроцедураЗагрузки.Вставить("ВнутреннийЗаказ_Create",                    "СоздатьНайти_ЗаказНаПеремещение");
	ПроцедураЗагрузки.Вставить("ПеремещениеТоваров_Create",                 "СоздатьНайти_ПеремещениеТоваров");
	
	// Отгрузка на уд. склад
	ПроцедураЗагрузки.Вставить("ВнутреннийЗаказ_ОтгрузкаНаУдСклад_Create",	"СоздатьНайти_ЗаказКлиента");
	ПроцедураЗагрузки.Вставить("ПеремещениеТоваров_ОтгрузкаНаУдСклад_Create","СоздатьНайти_РеализацияТоваровУслуг");
	
	// Возврат с уд. склада
	ПроцедураЗагрузки.Вставить("ВнутреннийЗаказ_ВозвратСУдСклада_Create",	"СоздатьНайти_ЗаявкаНаВозвратТоваровОтКлиента");
	ПроцедураЗагрузки.Вставить("ПеремещениеТоваров_ВозвратСУдСклада_Create","СоздатьНайти_ВозвратТоваровОтКлиента");
	
	ПроцедураЗагрузки.Вставить("ЗаказНаКомплектацию_Create",           		"СоздатьНайти_ЗаказНаСборку");
	ПроцедураЗагрузки.Вставить("КомплектацияНоменклатуры_Create",           "СоздатьНайти_СборкаТоваров");
	
	ПроцедураЗагрузки.Вставить("ЗаказПокупателя_Create",                    "СоздатьНайти_ЗаказКлиента");
	ПроцедураЗагрузки.Вставить("РеализацияТоваровУслуг_Create",             "СоздатьНайти_РеализацияТоваровУслуг");
	ПроцедураЗагрузки.Вставить("ЗаявкаНаВозвратТоваровОтПокупателя_Create", "СоздатьНайти_ЗаявкаНаВозвратТоваровОтКлиента");
	ПроцедураЗагрузки.Вставить("ВозвратТоваровОтПокупателя_Create",         "СоздатьНайти_ВозвратТоваровОтКлиента");
	ПроцедураЗагрузки.Вставить("ИнвентаризацияТоваровНаСкладе_Create",		"СоздатьНайти_ПересчетТоваров");
	
	Отказ = Ложь;
	// Установим соединение	
	Соединение = НовоеСоединение(Узел, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// создать бызовые СОМ для работы с серврером RabbitMQ
	Модель = Соединение.CreateModel();
	
	// получаем сообщения но не более 100 за раз
	Счетчик = 0;
	КолвоЗагружаемыхВОднуИтерацию  = ?(Узел.КолвоЗагружаемыхВОднуИтерацию = 0, 99999, Узел.КолвоЗагружаемыхВОднуИтерацию);
	ТэгДоставки = "";
	
	ТелоСообщения = ПолучитьСообщение(Модель, Очередь.ИмяОчереди, ТэгДоставки);
	Пока Не ТелоСообщения = Неопределено И Счетчик < КолвоЗагружаемыхВОднуИтерацию Цикл
		
		// Обработка результата
		Отказ = Ложь;
		Ошибка = Ложь;
		
		// Если пустая структура, удалим сразу
		СтруктураОбъекта = Десериализовать(ТелоСообщения, Отказ);
		Если Не СодержитДанные(СтруктураОбъекта) Тогда
			ДанныеПротокола = "Пустая структура: " + ТелоСообщения + "
			| Проц. " + ПроцедураЗагрузки[Очередь.ИмяОчереди] + "
			| Очередь: " + Очередь.ИмяОчереди;
			ЗаписатьДанныеПротокола(ДанныеПротокола, Истина);
		Иначе
			
			Попытка
				
				Если Очередь.ИмяОчереди = "Номенклатура_Create" Тогда
					СозданнаяСсылка = Справочники[Очередь.ОбъектМетаданных].ПустаяСсылка();
				Иначе
					СозданнаяСсылка = Документы[Очередь.ОбъектМетаданных].ПустаяСсылка(); 
				КонецЕсли;
				
				Выполнить("СозданнаяСсылка = " + ПроцедураЗагрузки[Очередь.ИмяОчереди] + "(СтруктураОбъекта, Очередь, Отказ)");
				
				Если Не Отказ Тогда
					ДанныеПротокола = "Загружен: " + СозданнаяСсылка + "
					| Проц. " + ПроцедураЗагрузки[Очередь.ИмяОчереди];
					ЗаписатьДанныеПротокола(ДанныеПротокола);
				КонецЕсли;
				
			Исключение
				Ошибка = Истина;
				ДанныеПротокола = "Ошибка при загрузке очереди: " + Очередь.ИмяОчереди + ", id=" + СтруктураОбъекта.id + "
				|" + ОписаниеОшибки() + "
				| Проц. " + ПроцедураЗагрузки[Очередь.ИмяОчереди];
				Сообщить(ДанныеПротокола, СтатусСообщения.Внимание);
				ЗаписатьДанныеПротокола(ДанныеПротокола, Ошибка);
			КонецПопытки;
		КонецЕсли; 
		
		Если Не Отказ и Не Ошибка Тогда
			Модель.BasicAck(ТэгДоставки, false); // delete from queues
		КонецЕсли; 
		
		// Получим следующее сообщение
		ТелоСообщения = ПолучитьСообщение(Модель, Очередь.ИмяОчереди, ТэгДоставки);
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	// Закрыть соединение
	Модель.Close();
	Соединение.Close();
	
КонецПроцедуры  // ЗагрузитьОчередьСообщений()

Процедура ВыгрузитьОчередьСообщений(Очередь) Экспорт
	
	// в дальнейшем в этой процедуре можно будет
	// создать неск. реглам. заданий для каждой очереди
	
	// выполним модуль очереди
	ВыгрузитьИзмененныеОбъекты(Очередь);
	
КонецПроцедуры  // ВыгрузитьОчередьСообщений()

Функция СоздатьОчередь(Модель, ИмяОчереди)
	
	//Попытка
	//	Возврат(Модель.QueueDeclare(ИмяОчереди, Истина, Ложь, Ложь, Null));	
	//Исключение
	//	ВызватьИсключение(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//КонецПопытки;
	//
	// Пока не можем, метод не определен
	Возврат Неопределено;
	
КонецФункции // СоздатьОчередь()

Функция ПолучитьИмяОчереди(Тип) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОбъектМетаданных", ОбъектМетаданных.Имя);
	
	Строки = Узел.ИменаОчередей_RabbitMQ.НайтиСтроки(Отбор);
	Для Каждого Стр Из Строки Цикл
		Возврат Стр.ИмяОчереди;
	КонецЦикла;	
	
КонецФункции

Функция ОтправитьНовоеСообщение(Источник, Модель, Очередь) Экспорт
	
	ИмяОчереди = Очередь.ИмяОчереди;
	
	Если ПустаяСтрока(ИмяОчереди) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяТочкиОбмена = ""; //amq.direct - по умолчанию
	
	ПараметрыОтправки = Модель.CreateBasicProperties();
	ПараметрыОтправки.AppId = Метаданные.Синоним;
	ПараметрыОтправки.ContentType = "text/plain";
	ПараметрыОтправки.DeliveryMode = 2; // OSU + Disk storage
	ПараметрыОтправки.CorrelationId = XMLСтрока(Источник.УникальныйИдентификатор());
	ПараметрыОтправки.Type = Источник.Метаданные().Имя;
	
	СоздатьОчередь(Модель, ИмяОчереди);
	
	ТелоСообщения = СформироватьСтруктуру(Источник, Очередь);
	
	Если Узел.СжиматьДанные Тогда
		ХранилищеЗначения = Новый ХранилищеЗначения(ТелоСообщения, Новый СжатиеДанных(9));
		ТелоСообщения = ЗначениеВСтрокуВнутр(ХранилищеЗначения);
	КонецЕсли; 
	
	UTF8Encoding = Новый COMОбъект("System.Text.UTF8Encoding");
	СтрокаSafeArray = UTF8Encoding.GetBytes_4(ТелоСообщения);	
	
	Результат = Модель.BasicPublish(
			ИмяТочкиОбмена,
			ИмяОчереди,
			False,
			ПараметрыОтправки,
			СтрокаSafeArray
	);
	
	Возврат Истина;

КонецФункции // ОтправитьНовоеСообщение()

#КонецОбласти


#Область ЗагрузкаОбъектов

#Область СозданиеОбъектов

#Область Issues

Процедура issue1_УказатьОснованияВЗаказахНаСборку(МассивСсылокЗаказовНаСборку, ОснованиеСсылка)
	
	Если НЕ (ТипЗнч(МассивСсылокЗаказовНаСборку) = Тип("Массив") И
		МассивСсылокЗаказовНаСборку.Количество() > 0
		) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОснованиеСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ИдентификаторСтруктура Из МассивСсылокЗаказовНаСборку Цикл
		Если Не ТипЗнч(ИдентификаторСтруктура) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли; 	
		
		ИдентификаторСтрока = ИдентификаторСтруктура.order_id;
		
		Менеджер_ЗаказНаСборку     = Документы.ЗаказНаСборку;
		
		ЭтоНовый = Ложь; Отказ = Ложь;
		ЗаказНаСборку_Ссылка = ПолучитьСсылку(ИдентификаторСтрока, Менеджер_ЗаказНаСборку, Отказ, ЭтоНовый);
		
		Если Отказ Или ЭтоНовый Тогда
			ДанныеПротокола = "(issue1_УказатьОснованияВЗаказахНаСборку) - ошибка:
			| Идент.=" +ИдентификаторСтрока + "- отказ или документ не существует"; 
			ЗаписатьДанныеПротокола(ДанныеПротокола, Истина);
			Продолжить;
		КонецЕсли;
		
		ЗаказНаСборку_Объект = ЗаказНаСборку_Ссылка.ПолучитьОбъект();
		ЗаказНаСборку_Объект.ДокументОснование = ОснованиеСсылка;
		Если ЗаписатьДокументВИБ(ЗаказНаСборку_Объект) Тогда
			ДанныеПротокола = "Для " + ЗаказНаСборку_Ссылка + "
			| указано основание: " + ОснованиеСсылка; 
			ЗаписатьДанныеПротокола(ДанныеПротокола, Ложь);
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область ЗаполнениеПоОснованиям 

Процедура ЗаполнитьШапкуДокументаНаОснованииЗаказаПоставщику(Объект, Знач ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Сделка КАК Сделка,
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику,
	|	ЗаказПоставщику.Партнер КАК Партнер,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.Договор КАК Договор,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ЗаказПоставщику.Соглашение КАК Соглашение,
	|	ЗаказПоставщику.Валюта КАК Валюта,
	|	ЗаказПоставщику.Валюта КАК ВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.Склад.ЭтоГруппа
	|				И ЗаказПоставщику.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИНАЧЕ ЗаказПоставщику.Склад
	|	КОНЕЦ КАК Склад,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.Склад.ЭтоГруппа
	|				И ЗаказПоставщику.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
	|	ЗаказПоставщику.ФормаОплаты КАК ФормаОплаты,
	|	ЗаказПоставщику.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗаказПоставщику.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗаказПоставщику.ЗакупкаПодДеятельность КАК ЗакупкаПодДеятельность,
	|	ЗаказПоставщику.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗаказПоставщику.Статус КАК СтатусДокумента,
	|	ЗаказПоставщику.Подразделение КАК Подразделение,
	|	ЗаказПоставщику.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ЗаказПоставщику.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
	|	ЗаказПоставщику.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
	|	ЗаказПоставщику.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
	|	ЕСТЬNULL(ЗаказПоставщику.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю, ЛОЖЬ) КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
	|	ЕСТЬNULL(ЗаказПоставщику.Соглашение.КалендарьВозвратаТары, ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)) КАК КалендарьВозвратаТары,
	|	НЕ ЗаказПоставщику.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)
	|				ИЛИ ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	ЗаказПоставщику.БанковскийСчет КАК БанковскийСчетОрганизации,
	|	ЗаказПоставщику.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ЗаказПоставщику.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗаказПоставщику.ПорядокОплаты КАК ПорядокОплаты,
	|	ЗаказПоставщику.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	ЗаказПоставщику.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыЗаказа = РезультатЗапроса.Выбрать();
	РеквизитыЗаказа.Следующий();
	
	// Заполнение шапки.
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыЗаказа);
	
КонецПроцедуры

Процедура ЗаполнитьШапкуДокументаНаОснованииЗаказаНаПеремещение(Объект, Знач ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказНаПеремещение.Сделка КАК Сделка,
	|	ЗаказНаПеремещение.Ссылка КАК ЗаказНаПеремещение,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваров) КАК ХозяйственнаяОперация,
	|	ЗаказНаПеремещение.Организация КАК Организация,
	|	ЗаказНаПеремещение.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	ЗаказНаПеремещение.Подразделение КАК Подразделение,
	|	ЗаказНаПеремещение.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Отгружено) КАК Статус,
	|	ЗаказНаПеремещение.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров,
	|	ЗаказНаПеремещение.Комментарий КАК Комментарий,
	|	0 КАК МаксимальныйКодСтроки,
	|	ЗаказНаПеремещение.Ответственный КАК Ответственный,
	|	ЗаказНаПеремещение.СкладОтправитель КАК СкладОтправитель,
	|	ЗаказНаПеремещение.СкладПолучатель КАК СкладПолучатель
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ГДЕ
	|	ЗаказНаПеремещение.Ссылка = &ДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыЗаказа = РезультатЗапроса.Выбрать();
	РеквизитыЗаказа.Следующий();
	
	// Заполнение шапки.
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыЗаказа);
	
КонецПроцедуры

Процедура ЗаполнитьШапкуДокументаНаОснованииЗаказаНаВнутреннееПотребление(Объект, Знач ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказНаВнутреннееПотребление.Ссылка КАК ЗаказНаВнутреннееПотребление,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию) КАК ХозяйственнаяОперация,
	|	ЗаказНаВнутреннееПотребление.Организация КАК Организация,
	|	ЗаказНаВнутреннееПотребление.Подразделение КАК Подразделение,
	|	ЗаказНаВнутреннееПотребление.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗаказНаВнутреннееПотребление.Ответственный КАК Ответственный,
	|	ЗаказНаВнутреннееПотребление.ПотреблениеДляДеятельности КАК ПотреблениеДляДеятельности,
	|	ЗаказНаВнутреннееПотребление.Склад КАК Склад
	|ИЗ
	|	Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
	|ГДЕ
	|	ЗаказНаВнутреннееПотребление.Ссылка = &ДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыЗаказа = РезультатЗапроса.Выбрать();
	РеквизитыЗаказа.Следующий();
	
	// Заполнение шапки.
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыЗаказа);

КонецПроцедуры //ЗаполнитьШапкуДокументаНаОснованииЗаказаНаВнутреннееПотребление
 
#КонецОбласти

#Область СоздатьНайти_Документ 

Функция СоздатьНайти_ЗаказНаСборку(ДанныеЗаказа, Очередь, Отказ)
	ЭтоНовый  = Ложь;
	
	#Область Поиск_Создание_Объекта 
	Менеджер     = Документы.ЗаказНаСборку;
	ТипЗначения  = Тип("ДокументСсылка.ЗаказНаСборку");
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	ОбъектСсылка = ПолучитьСсылку(ДанныеЗаказа.id, Менеджер, Отказ, ЭтоНовый);
		
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый Тогда
		
		Объект                 = Менеджер.СоздатьДокумент();
		УстановитьСсылкуНового(Объект, Менеджер, ДанныеЗаказа.id);
		
		РеквизитыПриСоздании = Новый Структура();
		РеквизитыПриСоздании.Вставить("Номер",		ДанныеЗаказа.num);
		РеквизитыПриСоздании.Вставить(
			"Дата",       ДатаJSON(ДанныеЗаказа.created_date)
		);
		РеквизитыПриСоздании.Вставить(
			"Организация",	СоздатьНайти_Организация(ДанныеЗаказа.organization_id)
		);
		РеквизитыПриСоздании.Вставить(
			"Склад", СоздатьНайти_Склад(ДанныеЗаказа.store, Отказ)
		);
		Если ДанныеЗаказа.type = "Комплектация" Тогда
			ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров;
		Иначе
			ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров;
		КонецЕсли; 
		РеквизитыПриСоздании.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыПриСоздании);
	Иначе
		Объект                 = ОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	#КонецОбласти
	
	#Область Обновление_Шапки
	ДанныеШапкиИзменились = Ложь;
	
	ОбновляемыеРеквизиты = Новый Структура;
	ОбновляемыеРеквизиты.Вставить("ВариантПриемкиТоваров", ЗакупкиСервер.ПолучитьВариантПриемкиТоваров() );
	ОбновляемыеРеквизиты.Вставить("Статус", Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
	ОбновляемыеРеквизиты.Вставить("МаксимальныйКодСтроки", 0);
	ОбновляемыеРеквизиты.Вставить("ДлительностьСборкиРазборки", 1);
	// Длительность
	ОбновляемыеРеквизиты.Вставить(
		"ЖелаемаяДатаПоступления", 
		Объект.Дата + ОбновляемыеРеквизиты.ДлительностьСборкиРазборки * 24 * 60 * 60
	);
	ОбновляемыеРеквизиты.Вставить("НачалоСборкиРазборки", Объект.Дата);
	ОбновляемыеРеквизиты.Вставить(
		"ОкончаниеСборкиРазборки",
		ОбновляемыеРеквизиты.ЖелаемаяДатаПоступления
	);
	// Комплект
	ОбновляемыеРеквизиты.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить);
	ОбновляемыеРеквизиты.Вставить("Номенклатура",СоздатьНайти_Номенклатуру(ДанныеЗаказа.item, Отказ));
	ОбновляемыеРеквизиты.Вставить("Количество", 		ДанныеЗаказа.qty);
	ОбновляемыеРеквизиты.Вставить("КоличествоУпаковок", ДанныеЗаказа.qty);
	ОбновляемыеРеквизиты.Вставить(
		"Упаковка", 
		СоздатьНайти_УпаковкаЕдиницыХраненияОстатков(
			ОбновляемыеРеквизиты.Номенклатура,
			ОбновляемыеРеквизиты.Номенклатура.ЕдиницаИзмерения,
			ДанныеЗаказа.unit
			)
	);
	
	// Запишем реквизиты
	ЗаписатьОбновляемыеРеквизиты(Объект, ОбновляемыеРеквизиты, ДанныеШапкиИзменились, Отказ);
	
	// Ищем основание- ЗаказКлиента
	ОтказОснования = Ложь;
	ЭтоНовоеОснование = Ложь;
	ИдентификаторОснования = ДанныеЗаказа.order_id;
	ДокументОснованиеСсылка = ПолучитьСсылку(ИдентификаторОснования, Документы.ЗаказКлиента, ОтказОснования, ЭтоНовоеОснование);
	Если Не ОтказОснования И Не ЭтоНовоеОснование Тогда 
		Объект.ДокументОснование = ДокументОснованиеСсылка;
		ДанныеШапкиИзменились = Истина;
	Иначе
		ДокументОснованиеСсылка = Неопределено;
	КонецЕсли;
	
	#КонецОбласти

	#Область ОбновлениеТабЧастиТовары 
	МассивСтрокТЧ = ДанныеЗаказа.items;
	Если ТипЗнч(МассивСтрокТЧ) = Тип("Массив") И МассивСтрокТЧ.Количество() Тогда
		
		// Создадим Кэш с теми же колонками что и у ТЧ документа
		Кэш = Объект.Товары.Выгрузить();
		Кэш.Очистить();
		
		// Заполним кэш товаров
		Для Каждого СтруктураСтрокиТЧ Из МассивСтрокТЧ Цикл  
			
			Если Не ТипЗнч(СтруктураСтрокиТЧ) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Номенклатура = СоздатьНайти_Номенклатуру(СтруктураСтрокиТЧ.item, Отказ);
			
			Если НЕ ЗначениеЗаполнено(Номенклатура) Или Отказ Тогда
				Продолжить;
			КонецЕсли; 
			
			РеквизитыСтроки = Новый Структура;
			РеквизитыСтроки.Вставить("КодСтроки", СтруктураСтрокиТЧ.key);
			РеквизитыСтроки.Вставить("Количество", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("КоличествоУпаковок", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("Номенклатура", Номенклатура);
			РеквизитыСтроки.Вставить(
				"Упаковка", 
				СоздатьНайти_УпаковкаЕдиницыХраненияОстатков(
						Номенклатура, 
						Номенклатура.ЕдиницаИзмерения, 
						СтруктураСтрокиТЧ.unit
				)
			);
			РеквизитыСтроки.Вставить(
				"ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить
			);
			
			НоваяСтрока = Кэш.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыСтроки);
			
		КонецЦикла;
		
		// Проверим, изменились ли данные
		ДанныеТЧИзменились = Не ОбщегоНазначения.КоллекцииИдентичны(
				Объект.Товары,
				Кэш,
				"Номенклатура, Упаковка, КоличествоУпаковок"
			);
		
		Если ДанныеТЧИзменились Тогда
			Объект.Товары.Загрузить(Кэш);
		КонецЕсли; 
		
	КонецЕсли;
	#КонецОбласти
			
	#Область ЗаписьИпроведение 
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый ИЛИ ДанныеШапкиИзменились ИЛИ ДанныеТЧИзменились Тогда
		ЗаписатьДокументВИБ(Объект);
	КонецЕсли;
	#КонецОбласти
						
	Возврат Объект.Ссылка;
	
КонецФункции //ЗаказНаСборку

Функция СоздатьНайти_СборкаТоваров(ДанныеСборки, Очередь, Отказ)
	ЭтоНовый  = Ложь;
		
	#Область ПоискРаспоряжения 
	Менеджер     = Документы.ЗаказНаСборку;
	ТипЗначения  = Тип("ДокументСсылка.ЗаказНаСборку");
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	РаспоряжениеСсылка = ПолучитьСсылку(ДанныеСборки.order_id, Менеджер, Отказ, ЭтоНовый);
	
	Если Отказ Тогда
		ДанныеПротокола = "Попытка загрузить ""Сборку товаров"" №" + ДанныеСборки.num + "- без распоряжения.";
		ЗаписатьДанныеПротокола(ДанныеПротокола, Истина);
		Возврат ПустаяСсылка;
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолучениеОбъекта 
	// Поиск и создание документа
 	Менеджер     = Документы.СборкаТоваров;
	ТипЗначения  = Тип("ДокументСсылка.СборкаТоваров");
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	ОбъектСсылка = ПолучитьСсылку(ДанныеСборки.id, Менеджер, Отказ, ЭтоНовый);
		
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый Тогда
		
		Объект                 = Менеджер.СоздатьДокумент();
		УстановитьСсылкуНового(Объект, Менеджер, ДанныеСборки.id);
		
		РеквизитыПриСоздании = Новый Структура();
		РеквизитыПриСоздании.Вставить("Номер",           ДанныеСборки.num);
		РеквизитыПриСоздании.Вставить("Дата",            ДатаJSON(ДанныеСборки.created_date));
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыПриСоздании);
		
		Объект.Заполнить(РаспоряжениеСсылка);
		
	Иначе
		Объект                 = ОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	#КонецОбласти

	#Область ОбновлениеШапкиОбъекта 
	// Обновляемые данные
	ДанныеШапкиИзменились = Истина;
	
	МассивРаспоряжений = Новый Массив;
	МассивРаспоряжений.Добавить(РаспоряжениеСсылка);
	
	ПараметрыЗаполнения = Менеджер.ПараметрыЗаполненияДокумента();
	ПараметрыЗаполнения.РеквизитыШапки = Менеджер.ДанныеЗаполненияНакладной(МассивРаспоряжений);
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения.РеквизитыШапки, МассивРаспоряжений);
	ПараметрыЗаполнения.МассивЗаказов = МассивРаспоряжений;
	ПараметрыЗаполнения.ПоЗаказуНаСборку = Истина;
	
	// Заполнение шапки
	Объект.Заполнить(ПараметрыЗаполнения);
	#КонецОбласти
	
	#Область Обновление_ТЧ_Товары 
	МассивСтрокТЧ = ДанныеСборки.items;
	Если Не Отказ И ТипЗнч(МассивСтрокТЧ) = Тип("Массив") И МассивСтрокТЧ.Количество() Тогда
		
		// Создадим Кэш с теми же колонками что и у ТЧ документа
		Кэш = Объект.Товары.Выгрузить();
		Кэш.Очистить();
		
		// Заполним кэш товаров
		Для Каждого СтруктураСтрокиТЧ Из МассивСтрокТЧ Цикл  
			
			Если Не ТипЗнч(СтруктураСтрокиТЧ) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Номенклатура = СоздатьНайти_Номенклатуру(СтруктураСтрокиТЧ.item, Отказ);
			
			Если НЕ ЗначениеЗаполнено(Номенклатура) Или Отказ Тогда
				Продолжить;
			КонецЕсли; 
			
			РеквизитыСтроки = Новый Структура;
			РеквизитыСтроки.Вставить("Количество",         СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("КоличествоУпаковок", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("Номенклатура",       Номенклатура);
			РеквизитыСтроки.Вставить("Упаковка",           СоздатьНайти_УпаковкаЕдиницыХраненияОстатков(
																Номенклатура,
																Номенклатура.ЕдиницаИзмерения,
																СтруктураСтрокиТЧ.unit
															)
			);
			
			СтрокиВЗаказе = РаспоряжениеСсылка.Товары.НайтиСтроки(
				Новый Структура("Номенклатура, Упаковка", РеквизитыСтроки.Номенклатура, РеквизитыСтроки.Упаковка)
				);
			Если СтрокиВЗаказе.Количество() Тогда
				КодСтроки = СтрокиВЗаказе[0].КодСтроки;
			Иначе
				КодСтроки = 0;
			КонецЕсли; 	
			РеквизитыСтроки.Вставить("КодСтроки", КодСтроки);
			
			НоваяСтрока = Кэш.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыСтроки);
			
		КонецЦикла;
		
		// Проверим, изменились ли данные
		ДанныеТЧИзменились = Не ОбщегоНазначения.КоллекцииИдентичны(
				Объект.Товары,
				Кэш,
				"Номенклатура, Упаковка, КоличествоУпаковок"
			);
		
		Если ДанныеТЧИзменились Тогда
			Объект.Товары.Загрузить(Кэш);
		КонецЕсли; 
		
	КонецЕсли;
	#КонецОбласти
		
	#Область ЗаписьИпроведение 
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый ИЛИ ДанныеШапкиИзменились ИЛИ ДанныеТЧИзменились Тогда
		Если ЗаписатьДокументВИБ(Объект) Тогда
			WMS_РаботаСоСтатусами.УстановитьСтатусДокумента(
				Объект,
				Объект,
				Перечисления.WMS_СтатусыДокументов.Обработан
			);
		КонецЕсли; 
	КонецЕсли;
	#КонецОбласти
					
	Возврат Объект.Ссылка;
КонецФункции // СоздатьНайти_СборкаТоваров()
 
Функция СоздатьНайти_ЗаказПоставщику(ДанныеЗаказа, Очередь, Отказ)
	
	#Область ПолучениеОбъекта 
	ЭтоНовый  = Ложь;
	
	Менеджер     = Документы.ЗаказПоставщику;
	ТипЗначения  = Тип("ДокументСсылка.ЗаказПоставщику");
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	ОбъектСсылка = ПолучитьСсылку(ДанныеЗаказа.id, Менеджер, Отказ, ЭтоНовый);
		
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый Тогда
		
		Объект                 = Менеджер.СоздатьДокумент();
		УстановитьСсылкуНового(Объект, Менеджер, ДанныеЗаказа.id);
		
		РеквизитыПриСоздании = Новый Структура();
		РеквизитыПриСоздании.Вставить("Номер",                 ДанныеЗаказа.num);
		РеквизитыПриСоздании.Вставить("Дата",                  ДатаJSON(ДанныеЗаказа.created_date));
		РеквизитыПриСоздании.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		РеквизитыПриСоздании.Вставить("Организация",           СоздатьНайти_Организация(ДанныеЗаказа.organization_id));

		РеквизитыПриСоздании.Вставить("Контрагент",            СоздатьНайти_Контрагента(ДанныеЗаказа.client, Отказ));
		РеквизитыПриСоздании.Вставить("Партнер",               РеквизитыПриСоздании.Контрагент.Партнер);

		ЗаполнитьЗначенияСвойств(Объект,                       РеквизитыПриСоздании);
		
	Иначе
		Объект                 = ОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	#КонецОбласти
	
	#Область ОбновлениеШапки 
	// Обновляемые данные
	ДанныеШапкиИзменились = Ложь;
	
	ОбновляемыеРеквизиты = Новый Структура;
	ОбновляемыеРеквизиты.Вставить("Склад", СоздатьНайти_Склад(ДанныеЗаказа.store, Отказ));
	ОбновляемыеРеквизиты.Вставить("Приоритет",
		Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Объект.Приоритет)
		);
	ОбновляемыеРеквизиты.Вставить("ПорядокРасчетов", ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(Объект));
	ОбновляемыеРеквизиты.Вставить("Статус", Перечисления.СтатусыЗаказовПоставщикам.Подтвержден);
	ОбновляемыеРеквизиты.Вставить("МаксимальныйКодСтроки", 0);
	ОбновляемыеРеквизиты.Вставить("ПоступлениеОднойДатой", Истина);
	ОбновляемыеРеквизиты.Вставить("ЦенаВключаетНДС", Истина);
	
	ДатаПоступления = ?(
		ДатаJSON(ДанныеЗаказа.arrival_date) = Дата(1,1,1),
		Объект.Дата,
		ДатаJSON(ДанныеЗаказа.arrival_date)
		);
	ОбновляемыеРеквизиты.Вставить("ДатаПоступления", ДатаПоступления);
	
	ОбновляемыеРеквизиты.Вставить("ВариантПриемкиТоваров", ЗакупкиСервер.ПолучитьВариантПриемкиТоваров() );
	ОбновляемыеРеквизиты.Вставить("Валюта", ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета());
	
	// Запишем реквизиты
	ЗаписатьОбновляемыеРеквизиты(Объект, ОбновляемыеРеквизиты, ДанныеШапкиИзменились, Отказ);
	
	Если Объект.НалогообложениеНДС.Пустая() Тогда
		ПараметрыЗаполнения = Менеджер.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект);
		УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(Объект.НалогообложениеНДС, ПараметрыЗаполнения);
		
		ПараметрыЗаполнения = Менеджер.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(Объект.ЗакупкаПодДеятельность, ПараметрыЗаполнения);
		
		ДанныеШапкиИзменились = Истина;
	КонецЕсли;
	#КонецОбласти
	
	#Область Обновление_ТЧ_Товары 
	// Обновление таб.ч. Товары
	МассивСтрокТЧ = ДанныеЗаказа.items;
	Если ТипЗнч(МассивСтрокТЧ) = Тип("Массив") И МассивСтрокТЧ.Количество() Тогда
		
		//Объект.Товары.Очистить();
		// Создадим Кэш с теми же колонками что и у ТЧ документа
		Кэш = Объект.Товары.Выгрузить();
		Кэш.Очистить();
		
		// Заполним кэш товаров
		Для Каждого СтруктураСтрокиТЧ Из МассивСтрокТЧ Цикл  
			
			Если Не ТипЗнч(СтруктураСтрокиТЧ) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Номенклатура = СоздатьНайти_Номенклатуру(СтруктураСтрокиТЧ.item, Отказ);
			
			Если НЕ ЗначениеЗаполнено(Номенклатура) Или Отказ Тогда
				Продолжить;
			КонецЕсли; 
			
			РеквизитыСтроки = Новый Структура;
			РеквизитыСтроки.Вставить("КодСтроки", 0);
			РеквизитыСтроки.Вставить("Количество", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("КоличествоУпаковок", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("Цена", СтруктураСтрокиТЧ.cnt);
			РеквизитыСтроки.Вставить("Сумма", СтруктураСтрокиТЧ.sum);
			РеквизитыСтроки.Вставить("СуммаНДС", СтруктураСтрокиТЧ.sum_nds);
			РеквизитыСтроки.Вставить("СтавкаНДС", ВернутьСтавкуНДСПоЧислу(СтруктураСтрокиТЧ.nds));
			РеквизитыСтроки.Вставить("Номенклатура", Номенклатура);
			РеквизитыСтроки.Вставить("ДатаПоступления", Объект.ДатаПоступления);
			РеквизитыСтроки.Вставить("Упаковка", СоздатьНайти_УпаковкаЕдиницыХраненияОстатков(Номенклатура, Номенклатура.ЕдиницаИзмерения, СтруктураСтрокиТЧ.unit));
			
			НоваяСтрока = Кэш.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыСтроки);
			Ценообразование.ПересчитатьСуммыВСтроке(НоваяСтрока, Ложь, Ложь, Истина, Объект.ЦенаВключаетНДС);
			
		КонецЦикла;
		
		// Дозаполним необходимые данные
		Если Кэш.Количество() Тогда
			СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(
					Объект.Склад,
					Ложь,
					Кэш,
					Ложь);
			УчетНДСУП.СкорректироватьСтавкуНДСВТЧДокумента(Объект, Кэш);
		КонецЕсли; 
		
		// Проверим, изменились ли данные
		ДанныеТЧИзменились = Не ОбщегоНазначения.КоллекцииИдентичны(
				Объект.Товары,
				Кэш,
				"Номенклатура, Упаковка, КоличествоУпаковок"
			);
		
		Если ДанныеТЧИзменились Тогда
			Объект.Товары.Загрузить(Кэш);
			Объект.ЗаполнитьЭтапыГрафикаОплаты();
		КонецЕсли; 
		
	КонецЕсли;
	#КонецОбласти
		
	#Область ЗаписьИпроведение 
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый ИЛИ ДанныеШапкиИзменились ИЛИ ДанныеТЧИзменились Тогда
		ЗаписатьДокументВИБ(Объект);
	КонецЕсли;
	#КонецОбласти
				
	Возврат Объект.Ссылка;
	
КонецФункции

Функция СоздатьНайти_ЗаказНаПеремещение(ДанныеЗаказа, Очередь, Отказ)
	ЭтоНовый  = Ложь;
	
	#Область Поиск_Создание_Объекта 
	Менеджер     = Документы.ЗаказНаПеремещение;
	ТипЗначения  = Тип("ДокументСсылка.ЗаказНаПеремещение");
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	ОбъектСсылка = ПолучитьСсылку(ДанныеЗаказа.id, Менеджер, Отказ, ЭтоНовый);
		
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый Тогда
		
		Объект                 = Менеджер.СоздатьДокумент();
		УстановитьСсылкуНового(Объект, Менеджер, ДанныеЗаказа.id);
		
		РеквизитыПриСоздании = Новый Структура();
		РеквизитыПриСоздании.Вставить("Номер",		ДанныеЗаказа.num);
		РеквизитыПриСоздании.Вставить("Дата",       ДатаJSON(ДанныеЗаказа.created_date));
		РеквизитыПриСоздании.Вставить("Организация",СоздатьНайти_Организация(ДанныеЗаказа.organization_id));
		РеквизитыПриСоздании.Вставить("ОрганизацияПолучатель", РеквизитыПриСоздании.Организация);
		РеквизитыПриСоздании.Вставить("СкладОтправитель", СоздатьНайти_Склад(ДанныеЗаказа.store_sender, Отказ));
		РеквизитыПриСоздании.Вставить("СкладПолучатель", СоздатьНайти_Склад(ДанныеЗаказа.store_recipient, Отказ));
		РеквизитыПриСоздании.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеремещениеТоваров);
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыПриСоздании);
		
	Иначе
		Объект                 = ОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	#КонецОбласти
	
	#Область Обновление_Шапки 
	ДанныеШапкиИзменились = Ложь;
	
	ОбновляемыеРеквизиты = Новый Структура;
	ОбновляемыеРеквизиты.Вставить("ВариантПриемкиТоваров", ЗакупкиСервер.ПолучитьВариантПриемкиТоваров() );
	ОбновляемыеРеквизиты.Вставить("Статус", Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
	ОбновляемыеРеквизиты.Вставить("МаксимальныйКодСтроки", 0);
	
	ДатаПоступления = ?(
		ДатаJSON(ДанныеЗаказа.arrival_date) = Дата(1,1,1),
		Объект.Дата,
		ДатаJSON(ДанныеЗаказа.arrival_date)
		);
	ОбновляемыеРеквизиты.Вставить("ЖелаемаяДатаПоступления", ДатаПоступления);
	// Запишем реквизиты
	ЗаписатьОбновляемыеРеквизиты(Объект, ОбновляемыеРеквизиты, ДанныеШапкиИзменились, Отказ);
	#КонецОбласти

	#Область Обновление_ТЧ 
	// Обновление таб.ч. Товары
	МассивСтрокТЧ = ДанныеЗаказа.items;
	Если ТипЗнч(МассивСтрокТЧ) = Тип("Массив") И МассивСтрокТЧ.Количество() Тогда
		
		// Создадим Кэш с теми же колонками что и у ТЧ документа
		Кэш = Объект.Товары.Выгрузить();
		Кэш.Очистить();
		
		// Заполним кэш товаров
		Для Каждого СтруктураСтрокиТЧ Из МассивСтрокТЧ Цикл  
			Если Не ТипЗнч(СтруктураСтрокиТЧ) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Номенклатура = СоздатьНайти_Номенклатуру(СтруктураСтрокиТЧ.item, Отказ);
			Если НЕ ЗначениеЗаполнено(Номенклатура) Или Отказ Тогда
				Продолжить;
			КонецЕсли; 
			
			РеквизитыСтроки = Новый Структура;
			РеквизитыСтроки.Вставить("КодСтроки", СтруктураСтрокиТЧ.key);
			РеквизитыСтроки.Вставить("Количество", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("КоличествоУпаковок", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("Номенклатура", Номенклатура);
			РеквизитыСтроки.Вставить(
				"Упаковка",
				СоздатьНайти_УпаковкаЕдиницыХраненияОстатков(Номенклатура, Номенклатура.ЕдиницаИзмерения, СтруктураСтрокиТЧ.unit)
			);
			РеквизитыСтроки.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить);
			РеквизитыСтроки.Вставить("НачалоОтгрузки", ДатаПоступления);
			РеквизитыСтроки.Вставить("ОкончаниеПоступления", ДатаПоступления + 7*24*24);
			
			НоваяСтрока = Кэш.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыСтроки);
			
		КонецЦикла;
		
		// Проверим, изменились ли данные
		ДанныеТЧИзменились = Не ОбщегоНазначения.КоллекцииИдентичны(
				Объект.Товары,
				Кэш,
				"КодСтроки, Номенклатура, Упаковка, КоличествоУпаковок"
			);
		
		Если ДанныеТЧИзменились Тогда
			Объект.Товары.Загрузить(Кэш);
		КонецЕсли; 
		
	КонецЕсли;
	#КонецОбласти
		
	#Область ЗаписьИпроведение 
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый ИЛИ ДанныеШапкиИзменились ИЛИ ДанныеТЧИзменились Тогда
		Если ЗаписатьДокументВИБ(Объект) Тогда
			//WMS_РаботаСоСтатусами.УстановитьСтатусДокумента(
			//	Объект,
			//	Объект,
			//	Перечисления.WMS_СтатусыДокументов.Обработан
			//);
		КонецЕсли; 
	КонецЕсли;
	#КонецОбласти
			
	Возврат Объект.Ссылка;
	
КонецФункции //ЗаказНаПеремещение

Функция СоздатьНайти_ПеремещениеТоваров(ДанныеПеремещения, Очередь, Отказ)
	ЭтоНовый  = Ложь;
		
	#Область ПоискРаспоряжения 
	Менеджер     = Документы.ЗаказНаПеремещение;
	ТипЗначения  = Тип("ДокументСсылка.ЗаказНаПеремещение");
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	РаспоряжениеСсылка = ПолучитьСсылку(ДанныеПеремещения.order_id, Менеджер, Отказ, ЭтоНовый);
	
	Если Отказ Тогда
		ДанныеПротокола = "Попытка загрузить ""Перемещение товаров"" №" + ДанныеПеремещения.num + "- без распоряжения.";
		ЗаписатьДанныеПротокола(ДанныеПротокола, Истина);
		Возврат ПустаяСсылка;
	КонецЕсли;
	#КонецОбласти
	
	#Область ПоискПеремещенияТоваров 
	Менеджер     = Документы.ПеремещениеТоваров;
	ТипЗначения  = Тип("ДокументСсылка.ПеремещениеТоваров");
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	ОбъектСсылка = ПолучитьСсылку(ДанныеПеремещения.id, Менеджер, Отказ, ЭтоНовый);
	
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли;
	#КонецОбласти
	
	#Область ЗаполнениеШапкиДокумента 
	Если ЭтоНовый Тогда
		
		Объект                 = Менеджер.СоздатьДокумент();
		УстановитьСсылкуНового(Объект, Менеджер, ДанныеПеремещения.id);
		
		РеквизитыПриСоздании = Новый Структура();
		РеквизитыПриСоздании.Вставить("Номер",           	ДанныеПеремещения.num);
		РеквизитыПриСоздании.Вставить("Дата",            	ДатаJSON(ДанныеПеремещения.created_date));
		РеквизитыПриСоздании.Вставить("ЗаказНаПеремещение", РаспоряжениеСсылка);
		РеквизитыПриСоздании.Вставить("ДатаРаспоряжения", 	РаспоряжениеСсылка.Дата);
		РеквизитыПриСоздании.Вставить("ПеремещениеПоЗаказам", Истина);
		
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыПриСоздании);
		ЗаполнитьШапкуДокументаНаОснованииЗаказаНаПеремещение(Объект, РаспоряжениеСсылка);
		
	Иначе
		Объект                 = ОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	// Обновляемые данные
	ДанныеШапкиИзменились = Ложь;
	ОбновляемыеРеквизиты = Новый Структура;
	ОбновляемыеРеквизиты.Вставить("Статус", Перечисления.СтатусыПеремещенийТоваров.Принято);
	ЗаписатьОбновляемыеРеквизиты(Объект, ОбновляемыеРеквизиты, ДанныеШапкиИзменились);
	#КонецОбласти
	
	#Область Обновление_ТЧ_Товары 
	МассивСтрокТЧ = ДанныеПеремещения.items;
	Если ТипЗнч(МассивСтрокТЧ) = Тип("Массив") И МассивСтрокТЧ.Количество() Тогда
		
		// Создадим Кэш с теми же колонками что и у ТЧ документа
		Кэш = Объект.Товары.Выгрузить();
		Кэш.Очистить();
		
		// Заполним кэш товаров
		Для Каждого СтруктураСтрокиТЧ Из МассивСтрокТЧ Цикл  
			
			Если Не ТипЗнч(СтруктураСтрокиТЧ) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Номенклатура = СоздатьНайти_Номенклатуру(СтруктураСтрокиТЧ.item, Отказ);
			
			Если НЕ ЗначениеЗаполнено(Номенклатура) Или Отказ Тогда
				Продолжить;
			КонецЕсли; 
			
			РеквизитыСтроки = Новый Структура;
			РеквизитыСтроки.Вставить("ЗаказНаПеремещение", РаспоряжениеСсылка);
			РеквизитыСтроки.Вставить("Количество", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("КоличествоУпаковок", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("Номенклатура", Номенклатура);
			РеквизитыСтроки.Вставить(
				"Упаковка",
				СоздатьНайти_УпаковкаЕдиницыХраненияОстатков(
					Номенклатура, Номенклатура.ЕдиницаИзмерения, СтруктураСтрокиТЧ.unit
					)
			);
			
			СтрокиВЗаказе = РаспоряжениеСсылка.Товары.НайтиСтроки(
				Новый Структура("Номенклатура, Упаковка", РеквизитыСтроки.Номенклатура, РеквизитыСтроки.Упаковка)
				);
			Если СтрокиВЗаказе.Количество() Тогда
				КодСтроки = СтрокиВЗаказе[0].КодСтроки;
			Иначе
				КодСтроки = 0;
			КонецЕсли; 	
			РеквизитыСтроки.Вставить("КодСтроки", КодСтроки);
			
			НоваяСтрока = Кэш.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыСтроки);
			//Ценообразование.ПересчитатьСуммыВСтроке(НоваяСтрока, Ложь, Ложь, Истина, Объект.ЦенаВключаетНДС);
			
		КонецЦикла;
		
		// Проверим, изменились ли данные
		ДанныеТЧИзменились = Не ОбщегоНазначения.КоллекцииИдентичны(
				Объект.Товары,
				Кэш,
				"ЗаказНаПеремещение, Номенклатура, Упаковка, КоличествоУпаковок"
			);
		
		Если ДанныеТЧИзменились Тогда
			Объект.Товары.Загрузить(Кэш);
		КонецЕсли; 
		
	КонецЕсли;
	#КонецОбласти
		
	#Область ЗаписьИпроведение 
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый ИЛИ ДанныеШапкиИзменились ИЛИ ДанныеТЧИзменились Тогда
		Если ЗаписатьДокументВИБ(Объект) Тогда
			WMS_РаботаСоСтатусами.УстановитьСтатусДокумента(
				Объект,
				Объект,
				Перечисления.WMS_СтатусыДокументов.Обработан
			);
		КонецЕсли; 
	КонецЕсли;
	#КонецОбласти
		
	#Область ЗаписьВхРеквизитовВОрдера 
	Если Не Отказ Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	НЕ ПриходныйОрдерНаТовары.ПометкаУдаления
		|	И ПриходныйОрдерНаТовары.Распоряжение = &Распоряжение
		|";
		
		Запрос.УстановитьПараметр("Распоряжение", РаспоряжениеСсылка);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			Исключение
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", Выборка.Ссылка);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписатьДанныеПротокола(ТекстОшибки, Истина);
				Отказ = Истина;
				Продолжить;
			КонецПопытки;
			
			ОрдерОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ДанныеИзменились = Ложь;
			ОбновляемыеРеквизиты = Новый Структура();
			ОбновляемыеРеквизиты.Вставить("НомерВходящегоДокумента", ДанныеПеремещения.num);
			ОбновляемыеРеквизиты.Вставить("ДатаВходящегоДокумента", ДатаJSON(ДанныеПеремещения.created_date));
			ЗаписатьОбновляемыеРеквизиты(ОрдерОбъект, ОбновляемыеРеквизиты, ДанныеИзменились, Отказ);
			
			Если Не Отказ Тогда
				ОрдерОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	#КонецОбласти
	
	Возврат Объект.Ссылка;
	
КонецФункции

Функция СоздатьНайти_ПоступлениеТоваровУслуг(ДанныеПоступления, Очередь, Отказ)
	ЭтоНовый  = Ложь;
		
	#Область ПоискРаспоряжения 
	Менеджер     = Документы.ЗаказПоставщику;
	ТипЗначения  = Тип("ДокументСсылка.ЗаказПоставщику");
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	РаспоряжениеСсылка = ПолучитьСсылку(ДанныеПоступления.order_id, Менеджер, Отказ, ЭтоНовый);
	
	Если Отказ Тогда
		ДанныеПротокола = "Попытка загрузить ""Поступление товаров и услуг"" №" + ДанныеПоступления.num + "- без распоряжения.";
		ЗаписатьДанныеПротокола(ДанныеПротокола, Истина);
		Возврат ПустаяСсылка;
	КонецЕсли;
	#КонецОбласти
	
	#Область Поиск_Создание_Объекта 
	// Поиск и создание Приобретения
	Менеджер     = Документы.ПриобретениеТоваровУслуг;
	ТипЗначения  = Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	ОбъектСсылка = ПолучитьСсылку(ДанныеПоступления.id, Менеджер, Отказ, ЭтоНовый);
		
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый Тогда
		
		Объект                 = Менеджер.СоздатьДокумент();
		УстановитьСсылкуНового(Объект, Менеджер, ДанныеПоступления.id);
		
		РеквизитыПриСоздании = Новый Структура();
		РеквизитыПриСоздании.Вставить("Номер",           ДанныеПоступления.num);
		РеквизитыПриСоздании.Вставить("Дата",            ДатаJSON(ДанныеПоступления.created_date));
		РеквизитыПриСоздании.Вставить("ЗаказПоставщику", РаспоряжениеСсылка);
		РеквизитыПриСоздании.Вставить("ПоступлениеПоЗаказам", Истина);
		
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыПриСоздании);
		ЗаполнитьШапкуДокументаНаОснованииЗаказаПоставщику(Объект, РаспоряжениеСсылка);
		
	Иначе
		Объект                 = ОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	#КонецОбласти
	
	#Область Обновление_Шапки 
	// Обновляемые данные
	ДанныеШапкиИзменились = Ложь;
	
	ОбновляемыеРеквизиты = Новый Структура;
	ОбновляемыеРеквизиты.Вставить("НомерВходящегоДокумента", 	ДанныеПоступления.arrival_num);
	ОбновляемыеРеквизиты.Вставить("ДатаВходящегоДокумента",  	ДатаJSON(ДанныеПоступления.arrival_date));
	// Запишем реквизиты
	ЗаписатьОбновляемыеРеквизиты(Объект, ОбновляемыеРеквизиты, ДанныеШапкиИзменились, Отказ);
	#КонецОбласти
	
	#Область Обновление_ТЧ_Товары 
	МассивСтрокТЧ = ДанныеПоступления.items;
	Если ТипЗнч(МассивСтрокТЧ) = Тип("Массив") И МассивСтрокТЧ.Количество() Тогда
		
		// Создадим Кэш с теми же колонками что и у ТЧ документа
		Кэш = Объект.Товары.Выгрузить();
		Кэш.Очистить();
		
		// Заполним кэш товаров
		Для Каждого СтруктураСтрокиТЧ Из МассивСтрокТЧ Цикл  
			
			Если Не ТипЗнч(СтруктураСтрокиТЧ) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Номенклатура = СоздатьНайти_Номенклатуру(СтруктураСтрокиТЧ.item, Отказ);
			
			Если НЕ ЗначениеЗаполнено(Номенклатура) Или Отказ Тогда
				Продолжить;
			КонецЕсли; 
			
			РеквизитыСтроки = Новый Структура;
			РеквизитыСтроки.Вставить("ЗаказПоставщику", РаспоряжениеСсылка);
			РеквизитыСтроки.Вставить("Количество", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("КоличествоУпаковок", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("Цена", СтруктураСтрокиТЧ.cnt);
			РеквизитыСтроки.Вставить("Сумма", СтруктураСтрокиТЧ.sum);
			РеквизитыСтроки.Вставить("СуммаНДС", СтруктураСтрокиТЧ.sum_nds);
			РеквизитыСтроки.Вставить("СтавкаНДС", ВернутьСтавкуНДСПоЧислу(СтруктураСтрокиТЧ.nds));
			РеквизитыСтроки.Вставить("Номенклатура", Номенклатура);
			РеквизитыСтроки.Вставить("Упаковка", СоздатьНайти_УпаковкаЕдиницыХраненияОстатков(Номенклатура, Номенклатура.ЕдиницаИзмерения, СтруктураСтрокиТЧ.unit));
			
			СтрокиВЗаказе = РаспоряжениеСсылка.Товары.НайтиСтроки(
				Новый Структура("Номенклатура, Упаковка", РеквизитыСтроки.Номенклатура, РеквизитыСтроки.Упаковка)
				);
			Если СтрокиВЗаказе.Количество() Тогда
				КодСтроки = СтрокиВЗаказе[0].КодСтроки;
			Иначе
				КодСтроки = 0;
			КонецЕсли; 	
			РеквизитыСтроки.Вставить("КодСтроки", КодСтроки);
			
			НоваяСтрока = Кэш.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыСтроки);
			Ценообразование.ПересчитатьСуммыВСтроке(НоваяСтрока, Ложь, Ложь, Истина, Объект.ЦенаВключаетНДС);
			
		КонецЦикла;
		
		// Дозаполним необходимые данные
		Если Кэш.Количество() Тогда
			СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(
					Объект.Склад,
					Ложь,
					Кэш,
					Ложь);
			УчетНДСУП.СкорректироватьСтавкуНДСВТЧДокумента(Объект, Кэш);
		КонецЕсли; 
		
		// Проверим, изменились ли данные
		ДанныеТЧИзменились = Не ОбщегоНазначения.КоллекцииИдентичны(
				Объект.Товары,
				Кэш,
				"ЗаказПоставщику, Номенклатура, Упаковка, КоличествоУпаковок"
			);
		
		Если ДанныеТЧИзменились Тогда
			Объект.Товары.Загрузить(Кэш);
			Объект.ЗаполнитьЭтапыГрафикаОплаты();
		КонецЕсли; 
		
	КонецЕсли;
	#КонецОбласти
		
	#Область ЗаписьИпроведение 
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый ИЛИ ДанныеШапкиИзменились ИЛИ ДанныеТЧИзменились Тогда
		Если ЗаписатьДокументВИБ(Объект) Тогда
			WMS_РаботаСоСтатусами.УстановитьСтатусДокумента(
				Объект,
				Объект,
				Перечисления.WMS_СтатусыДокументов.Обработан
			);
		КонецЕсли; 
	КонецЕсли;
	#КонецОбласти
		
	#Область ЗаписьВхРеквизитовВОрдера 
	Если Не Отказ Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	НЕ ПриходныйОрдерНаТовары.ПометкаУдаления
		|	И ПриходныйОрдерНаТовары.Распоряжение = &Распоряжение";
		
		Запрос.УстановитьПараметр("Распоряжение", РаспоряжениеСсылка);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			Исключение
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", Выборка.Ссылка);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписатьДанныеПротокола(ТекстОшибки, Истина);
				Отказ = Истина;
				Продолжить;
			КонецПопытки;
			
			ОрдерОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ДанныеИзменились = Ложь;
			ОбновляемыеРеквизиты = Новый Структура();
			ОбновляемыеРеквизиты.Вставить("НомерВходящегоДокумента",ДанныеПоступления.num);
			ОбновляемыеРеквизиты.Вставить("ДатаВходящегоДокумента", ДатаJSON(ДанныеПоступления.created_date));
			ЗаписатьОбновляемыеРеквизиты(ОрдерОбъект, ОбновляемыеРеквизиты, ДанныеИзменились, Отказ);
			
			Если Не Отказ Тогда
				ОрдерОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	#КонецОбласти
	
	Возврат Объект.Ссылка;
	
КонецФункции

Функция СоздатьНайти_ЗаказКлиента(ДанныеЗаказа, Очередь, Отказ)
	ЭтоНовый  = Ложь;
	
	#Область Получение_Объекта 
	Менеджер     = Документы.ЗаказКлиента;
	ТипЗначения  = Тип("ДокументСсылка.ЗаказКлиента");
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	ОбъектСсылка = ПолучитьСсылку(ДанныеЗаказа.id, Менеджер, Отказ, ЭтоНовый);
		
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый Тогда
		
		Объект = Менеджер.СоздатьДокумент();
		УстановитьСсылкуНового(Объект, Менеджер, ДанныеЗаказа.id);
		
		РеквизитыПриСоздании = Новый Структура();
		РеквизитыПриСоздании.Вставить("Номер",		ДанныеЗаказа.num);
		РеквизитыПриСоздании.Вставить("Дата",       ДатаJSON(ДанныеЗаказа.created_date));
		РеквизитыПриСоздании.Вставить(
			"ХозяйственнаяОперация",
			Перечисления.ХозяйственныеОперации.РеализацияКлиенту
		);
		РеквизитыПриСоздании.Вставить(
			"Организация", СоздатьНайти_Организация(ДанныеЗаказа.organization_id)
		);
		РеквизитыПриСоздании.Вставить(
			"Склад", СоздатьНайти_Склад(ДанныеЗаказа.store, Отказ)
		);
		РеквизитыПриСоздании.Вставить(
			"WMS_СкладскаяОперация", 
			Очередь.СкладскаяОперация
		);
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыПриСоздании);
		
	Иначе
		Объект = ОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	#КонецОбласти
	
	#Область Обновление_Шапки 
	ДанныеШапкиИзменились = Ложь;
	
	ОбновляемыеРеквизиты = Новый Структура;
	ОбновляемыеРеквизиты.Вставить(
			"Организация", СоздатьНайти_Организация(ДанныеЗаказа.organization_id)
		);
	ОбновляемыеРеквизиты.Вставить("Валюта", ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета());
	ОбновляемыеРеквизиты.Вставить(
		"Контрагент", СоздатьНайти_Контрагента(ДанныеЗаказа.client, Отказ)
	);
	ОбновляемыеРеквизиты.Вставить("Партнер", ОбновляемыеРеквизиты.Контрагент.Партнер);
	
	ДатаОтгрузки = ДатаJSON(ДанныеЗаказа.delivery_date);
	Если ДатаОтгрузки = Дата(1,1,1) Тогда
		ДатаОтгрузки = Объект.Дата;
	КонецЕсли; 
	ОбновляемыеРеквизиты.Вставить("ДатаОтгрузки", ДатаОтгрузки);
	ОбновляемыеРеквизиты.Вставить("ЖелаемаяДатаОтгрузки", ДатаОтгрузки);
	
	ОбновляемыеРеквизиты.Вставить("Статус", Перечисления.СтатусыЗаказовКлиентов.КОбеспечению);
	ОбновляемыеРеквизиты.Вставить("Приоритет",
		Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Объект.Приоритет)
		);
	ОбновляемыеРеквизиты.Вставить("ПорядокРасчетов", ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(Объект));
	ОбновляемыеРеквизиты.Вставить("МаксимальныйКодСтроки", 0);
	ОбновляемыеРеквизиты.Вставить("НеОтгружатьЧастями", Истина);
	ОбновляемыеРеквизиты.Вставить("ЦенаВключаетНДС", Истина);
	
	// Формируем комментарий
	Если ДанныеЗаказа.Свойство("dlv_receiver") Тогда
		ФорматКомментария = "ТК: '%1' %2 в г. '%3'. '%4'";
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ФорматКомментария,
			ДанныеЗаказа.dlv_receiver,
			?(ДанныеЗаказа.dlv_yourself, "самовывоз", ""),
			ДанныеЗаказа.dlv_city,
			ДанныеЗаказа.commment
		);
		ОбновляемыеРеквизиты.Вставить("Комментарий", Комментарий);
	КонецЕсли; 
	
	// Запишем реквизиты
	ЗаписатьОбновляемыеРеквизиты(Объект, ОбновляемыеРеквизиты, ДанныеШапкиИзменились, Отказ);
	
	Если Объект.НалогообложениеНДС.Пустая() Тогда
		ПараметрыЗаполнения = Документы.ЗаказКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(Объект);
		УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(Объект.НалогообложениеНДС, ПараметрыЗаполнения);
		
		ДанныеШапкиИзменились = Истина;
	КонецЕсли;
	#КонецОбласти

	#Область Обновление_ТЧ_Товары 
	// Обновление таб.ч. Товары
	МассивСтрокТЧ = ДанныеЗаказа.items;
	Если ТипЗнч(МассивСтрокТЧ) = Тип("Массив") И МассивСтрокТЧ.Количество() Тогда
		
		//Объект.Товары.Очистить();
		// Создадим Кэш с теми же колонками что и у ТЧ документа
		Кэш = Объект.Товары.Выгрузить();
		Кэш.Очистить();
		
		// Заполним кэш товаров
		Для Каждого СтруктураСтрокиТЧ Из МассивСтрокТЧ Цикл  
			
			Если Не ТипЗнч(СтруктураСтрокиТЧ) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Номенклатура = СоздатьНайти_Номенклатуру(СтруктураСтрокиТЧ.item, Отказ);
			
			Если НЕ ЗначениеЗаполнено(Номенклатура) Или Отказ Тогда
				Продолжить;
			КонецЕсли; 
			
			РеквизитыСтроки = Новый Структура;
			РеквизитыСтроки.Вставить("КодСтроки", СтруктураСтрокиТЧ.key);
			РеквизитыСтроки.Вставить("Количество", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("КоличествоУпаковок", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("Цена", СтруктураСтрокиТЧ.cnt);
			РеквизитыСтроки.Вставить("Сумма", СтруктураСтрокиТЧ.sum);
			РеквизитыСтроки.Вставить("СуммаНДС", СтруктураСтрокиТЧ.sum_nds);
			РеквизитыСтроки.Вставить("СтавкаНДС", ВернутьСтавкуНДСПоЧислу(СтруктураСтрокиТЧ.nds));
			РеквизитыСтроки.Вставить("Номенклатура", Номенклатура);
			РеквизитыСтроки.Вставить("ДатаОтгрузки", Объект.ДатаОтгрузки);
			РеквизитыСтроки.Вставить(
				"Упаковка", 
				СоздатьНайти_УпаковкаЕдиницыХраненияОстатков(
					Номенклатура, Номенклатура.ЕдиницаИзмерения, СтруктураСтрокиТЧ.unit
					)
			);
			РеквизитыСтроки.Вставить(
				"ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить
			);
			
			НоваяСтрока = Кэш.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыСтроки);
			Ценообразование.ПересчитатьСуммыВСтроке(НоваяСтрока, Ложь, Ложь, Истина, Объект.ЦенаВключаетНДС);
			
		КонецЦикла;
		
		// Дозаполним необходимые данные
		Если Кэш.Количество() Тогда
			СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(
					Объект.Склад,
					Ложь,
					Кэш,
					Ложь);
			УчетНДСУП.СкорректироватьСтавкуНДСВТЧДокумента(Объект, Кэш);
		КонецЕсли; 
		
		// Проверим, изменились ли данные
		ДанныеТЧИзменились = Не ОбщегоНазначения.КоллекцииИдентичны(
				Объект.Товары,
				Кэш,
				"КодСтроки, Номенклатура, Упаковка, КоличествоУпаковок"
			);
		
		Если ДанныеТЧИзменились Тогда
			Объект.Товары.Загрузить(Кэш);
			Объект.ЗаполнитьЭтапыГрафикаОплаты();
		КонецЕсли; 
		
	КонецЕсли;
	#КонецОбласти
		
	#Область ЗаписьИпроведение 
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый ИЛИ ДанныеШапкиИзменились ИЛИ ДанныеТЧИзменились Тогда
		Если ЗаписатьДокументВИБ(Объект) Тогда
			// issue#1 при загрузке заказа клиента, найти все заказы на сборку и подставить 
			// 			заказ клиенту как основание для заказа на сборку 
			Если ДанныеЗаказа.Свойство("assembly_orders") Тогда
				issue1_УказатьОснованияВЗаказахНаСборку(ДанныеЗаказа.assembly_orders, Объект.Ссылка);	
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;	
	#КонецОбласти
		
	Возврат Объект.Ссылка;
	
КонецФункции

Функция СоздатьНайти_РеализацияТоваровУслуг(ДанныеРеализации, Очередь, Отказ)
	ЭтоНовый  = Ложь;
	
	#Область ПоискРаспоряжения 
	Менеджер     = Документы.ЗаказКлиента;
	ТипЗначения  = Тип("ДокументСсылка.ЗаказКлиента");
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	РаспоряжениеСсылка = ПолучитьСсылку(ДанныеРеализации.order_id, Менеджер, Отказ, ЭтоНовый);
	
	Если Отказ Тогда
		ДанныеПротокола = "Попытка загрузить ""Поступление товаров и услуг"" №" + ДанныеРеализации.num + "- без распоряжения.";
		ЗаписатьДанныеПротокола(ДанныеПротокола, Истина);
		Возврат ПустаяСсылка;
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолучениеОбъекта 
	// Поиск и создание Отгрузки
	Менеджер     = Документы.РеализацияТоваровУслуг;
	ТипЗначения  = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	ОбъектСсылка = ПолучитьСсылку(ДанныеРеализации.id, Менеджер, Отказ, ЭтоНовый);
		
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый Тогда
		
		Объект                 = Менеджер.СоздатьДокумент();
		УстановитьСсылкуНового(Объект, Менеджер, ДанныеРеализации.id);
		
		РеквизитыПриСоздании = Новый Структура();
		РеквизитыПриСоздании.Вставить("Номер",           ДанныеРеализации.num);
		РеквизитыПриСоздании.Вставить("Дата",            ДатаJSON(ДанныеРеализации.created_date));
		РеквизитыПриСоздании.Вставить(
			"WMS_СкладскаяОперация", 
			Очередь.СкладскаяОперация
		);
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыПриСоздании);
		
		Объект.Заполнить(РаспоряжениеСсылка);
		
	Иначе
		Объект                 = ОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	#КонецОбласти

	// Обновляемые данные
	ДанныеШапкиИзменились = Ложь;
	
	#Область Обновление_ТЧ_Товары 
	МассивСтрокТЧ = ДанныеРеализации.items;
	Если ТипЗнч(МассивСтрокТЧ) = Тип("Массив") И МассивСтрокТЧ.Количество() Тогда
		
		// Создадим Кэш с теми же колонками что и у ТЧ документа
		Кэш = Объект.Товары.Выгрузить();
		Кэш.Очистить();
		
		// Заполним кэш товаров
		Для Каждого СтруктураСтрокиТЧ Из МассивСтрокТЧ Цикл  
			
			Если Не ТипЗнч(СтруктураСтрокиТЧ) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Номенклатура = СоздатьНайти_Номенклатуру(СтруктураСтрокиТЧ.item, Отказ);
			
			Если НЕ ЗначениеЗаполнено(Номенклатура) Или Отказ Тогда
				Продолжить;
			КонецЕсли; 
			
			РеквизитыСтроки = Новый Структура;
			РеквизитыСтроки.Вставить("ЗаказКлиента", РаспоряжениеСсылка);
			РеквизитыСтроки.Вставить("Количество", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("КоличествоУпаковок", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("Цена", СтруктураСтрокиТЧ.cnt);
			РеквизитыСтроки.Вставить("Сумма", СтруктураСтрокиТЧ.sum);
			РеквизитыСтроки.Вставить("СуммаНДС", СтруктураСтрокиТЧ.sum_nds);
			РеквизитыСтроки.Вставить("СтавкаНДС", ВернутьСтавкуНДСПоЧислу(СтруктураСтрокиТЧ.nds));
			РеквизитыСтроки.Вставить("Номенклатура", Номенклатура);
			РеквизитыСтроки.Вставить("Упаковка", СоздатьНайти_УпаковкаЕдиницыХраненияОстатков(Номенклатура, Номенклатура.ЕдиницаИзмерения, СтруктураСтрокиТЧ.unit));
			
			СтрокиВЗаказе = РаспоряжениеСсылка.Товары.НайтиСтроки(
				Новый Структура("Номенклатура, Упаковка", РеквизитыСтроки.Номенклатура, РеквизитыСтроки.Упаковка)
				);
			Если СтрокиВЗаказе.Количество() Тогда
				КодСтроки = СтрокиВЗаказе[0].КодСтроки;
			Иначе
				КодСтроки = 0;
			КонецЕсли; 	
			РеквизитыСтроки.Вставить("КодСтроки", КодСтроки);
			
			НоваяСтрока = Кэш.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыСтроки);
			Ценообразование.ПересчитатьСуммыВСтроке(НоваяСтрока, Ложь, Ложь, Истина, Объект.ЦенаВключаетНДС);
			
		КонецЦикла;
		
		// Дозаполним необходимые данные
		Если Кэш.Количество() Тогда
			СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(
					Объект.Склад,
					Ложь,
					Кэш,
					Ложь);
			УчетНДСУП.СкорректироватьСтавкуНДСВТЧДокумента(Объект, Кэш);
		КонецЕсли; 
		
		// Проверим, изменились ли данные
		ДанныеТЧИзменились = Не ОбщегоНазначения.КоллекцииИдентичны(
				Объект.Товары,
				Кэш,
				"ЗаказКлиента, Номенклатура, Упаковка, КоличествоУпаковок"
			);
		
		Если ДанныеТЧИзменились Тогда
			Объект.Товары.Загрузить(Кэш);
		КонецЕсли; 
		
	КонецЕсли;
	#КонецОбласти

	#Область ЗаписьИпроведение 
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый ИЛИ ДанныеШапкиИзменились ИЛИ ДанныеТЧИзменились Тогда
		Если ЗаписатьДокументВИБ(Объект) Тогда
			WMS_РаботаСоСтатусами.УстановитьСтатусДокумента(
				Объект,
				Объект,
				Перечисления.WMS_СтатусыДокументов.Обработан
			);
		КонецЕсли; 
	КонецЕсли;
	#КонецОбласти
		
	Возврат Объект.Ссылка;
	
КонецФункции

Функция СоздатьНайти_ЗаявкаНаВозвратТоваровОтКлиента(ДанныеЗаказа, Очередь, Отказ)	// w06.01 
	ЭтоНовый  = Ложь;
	
	#Область Получение_Объекта 
	Менеджер     = Документы.ЗаявкаНаВозвратТоваровОтКлиента;
	ТипЗначения  = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	ОбъектСсылка = ПолучитьСсылку(ДанныеЗаказа.id, Менеджер, Отказ, ЭтоНовый);
		
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый Тогда
		
		Объект = Менеджер.СоздатьДокумент();
		УстановитьСсылкуНового(Объект, Менеджер, ДанныеЗаказа.id);
		
		РеквизитыПриСоздании = Новый Структура();
		РеквизитыПриСоздании.Вставить("Номер",		ДанныеЗаказа.num);
		РеквизитыПриСоздании.Вставить("Дата",       ДатаJSON(ДанныеЗаказа.created_date));
		РеквизитыПриСоздании.Вставить(
			"Организация", СоздатьНайти_Организация(ДанныеЗаказа.organization_id)
		);
		РеквизитыПриСоздании.Вставить(
			"Контрагент", СоздатьНайти_Контрагента(ДанныеЗаказа.client, Отказ)
		);
		Если Не Отказ Тогда
			РеквизитыПриСоздании.Вставить("Партнер", РеквизитыПриСоздании.Контрагент.Партнер);
		КонецЕсли;
		РеквизитыПриСоздании.Вставить(
			"Склад", СоздатьНайти_Склад(ДанныеЗаказа.store, Отказ)
		);
		РеквизитыПриСоздании.Вставить(
			"WMS_СкладскаяОперация", 
			Очередь.СкладскаяОперация
		);
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыПриСоздании);
		
	Иначе
		Объект = ОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	#КонецОбласти
		
	#Область Обновление_Шапки 
	ДанныеШапкиИзменились = Ложь;
	
	ОбновляемыеРеквизиты = Новый Структура;
	
	// Если передан ид. заказа, ищем заказ
	РаспоряжениеСсылка = ПолучитьСсылку(ДанныеЗаказа.order_id, Документы.ЗаказКлиента, , );
	РеализацияРаспоряжения = ВернутьРеализациюПоЗаказу(РаспоряжениеСсылка);
	Если Не РеализацияРаспоряжения.Пустая() Тогда
		ОбновляемыеРеквизиты.Вставить("ДокументРеализации", РеализацияРаспоряжения);
	КонецЕсли; 
	
	ОбновляемыеРеквизиты.Вставить("Валюта", 	  ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета());
	ОбновляемыеРеквизиты.Вставить("ЖелаемаяДатаПоступления", Объект.Дата + (24 * 60 * 60));
	ОбновляемыеРеквизиты.Вставить("ДатаПоступления", Объект.Дата + (24 * 60 * 60));
	ОбновляемыеРеквизиты.Вставить("ПоступлениеОднойДатой", Истина);
	ОбновляемыеРеквизиты.Вставить("ВариантПриемкиТоваров", ЗакупкиСервер.ПолучитьВариантПриемкиТоваров() );
	ОбновляемыеРеквизиты.Вставить("Статус", Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению);
	ОбновляемыеРеквизиты.Вставить("Приоритет",
		Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Объект.Приоритет)
		);
	ОбновляемыеРеквизиты.Вставить("ПорядокРасчетов", ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(Объект));
	ОбновляемыеРеквизиты.Вставить("НеОтгружатьЧастями", Истина);
	ОбновляемыеРеквизиты.Вставить("ЦенаВключаетНДС", Истина);
	ОбновляемыеРеквизиты.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	ОбновляемыеРеквизиты.Вставить("СпособКомпенсации", Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства);
	
	// Запишем реквизиты
	ЗаписатьОбновляемыеРеквизиты(Объект, ОбновляемыеРеквизиты, ДанныеШапкиИзменились, Отказ);
	
	Если Объект.НалогообложениеНДС.Пустая() Тогда
		ПараметрыЗаполнения = Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(Объект);
		УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(Объект.НалогообложениеНДС, ПараметрыЗаполнения);
		ДанныеШапкиИзменились = Истина;
	КонецЕсли;
	#КонецОбласти
	
	#Область Обновление_ТЧ_Товары 
	// Обновление таб.ч. Товары
	МассивСтрокТЧ = ДанныеЗаказа.items;
	Если ТипЗнч(МассивСтрокТЧ) = Тип("Массив") И МассивСтрокТЧ.Количество() Тогда
		
		//Объект.Товары.Очистить();
		// Создадим Кэш с теми же колонками что и у ТЧ документа
		Кэш = Объект.ВозвращаемыеТовары.Выгрузить();
		Кэш.Очистить();
		
		// Заполним кэш товаров
		Для Каждого СтруктураСтрокиТЧ Из МассивСтрокТЧ Цикл  
			
			Если Не ТипЗнч(СтруктураСтрокиТЧ) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Номенклатура = СоздатьНайти_Номенклатуру(СтруктураСтрокиТЧ.item, Отказ);
			
			Если НЕ ЗначениеЗаполнено(Номенклатура) Или Отказ Тогда
				Продолжить;
			КонецЕсли; 
			
			РеквизитыСтроки = Новый Структура;
			РеквизитыСтроки.Вставить("КодСтроки", СтруктураСтрокиТЧ.key);
			РеквизитыСтроки.Вставить("Количество", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("КоличествоУпаковок", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("Цена", СтруктураСтрокиТЧ.cnt);
			РеквизитыСтроки.Вставить("Сумма", СтруктураСтрокиТЧ.sum);
			РеквизитыСтроки.Вставить("СуммаНДС", СтруктураСтрокиТЧ.sum_nds);
			РеквизитыСтроки.Вставить("СтавкаНДС", ВернутьСтавкуНДСПоЧислу(СтруктураСтрокиТЧ.nds));
			РеквизитыСтроки.Вставить("Номенклатура", Номенклатура);
			РеквизитыСтроки.Вставить("ДатаПоступления", Объект.ДатаПоступления);
			РеквизитыСтроки.Вставить("ДокументРеализации", Объект.ДокументРеализации);
			РеквизитыСтроки.Вставить(
				"Упаковка", 
				СоздатьНайти_УпаковкаЕдиницыХраненияОстатков(
					Номенклатура, Номенклатура.ЕдиницаИзмерения, СтруктураСтрокиТЧ.unit
					)
			);
			РеквизитыСтроки.Вставить(
				"ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить
			);
			
			НоваяСтрока = Кэш.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыСтроки);
			
		КонецЦикла;
		
		// Дозаполним необходимые данные
		Если Кэш.Количество() Тогда
			УчетНДСУП.СкорректироватьСтавкуНДСВТЧДокумента(Объект, Кэш);
		КонецЕсли; 
		
		// Проверим, изменились ли данные
		ДанныеТЧИзменились = Не ОбщегоНазначения.КоллекцииИдентичны(
				Объект.ВозвращаемыеТовары,
				Кэш,
				"Номенклатура, Упаковка, КоличествоУпаковок"
			);
		
		Если ДанныеТЧИзменились Тогда
			Объект.ВозвращаемыеТовары.Загрузить(Кэш);
			Объект.ЗаполнитьЭтапыГрафикаОплаты();
		КонецЕсли; 
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ЗаписьИпроведение 
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый ИЛИ ДанныеШапкиИзменились ИЛИ ДанныеТЧИзменились Тогда
		ЗаписатьДокументВИБ(Объект);
	КонецЕсли;
	#КонецОбласти
	
	Возврат Объект.Ссылка;
	
КонецФункции

Функция СоздатьНайти_ВозвратТоваровОтКлиента(ДанныеВозврата, Очередь, Отказ) // w06.03
	ЭтоНовый  = Ложь;
		
	#Область ПоискРаспоряжения 
	Менеджер     = Документы.ЗаявкаНаВозвратТоваровОтКлиента;
	ТипЗначения  = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	РаспоряжениеСсылка = ПолучитьСсылку(ДанныеВозврата.order_id, Менеджер, Отказ, ЭтоНовый);
	
	Если Отказ Тогда
		ДанныеПротокола = "Попытка загрузить ""Возврат от покупателя"" №" + ДанныеВозврата.num + "- без распоряжения.";
		ЗаписатьДанныеПротокола(ДанныеПротокола, Истина);
		Возврат ПустаяСсылка;
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолучениеОбъекта 
	// Поиск и создание документа
 	Менеджер     = Документы.ВозвратТоваровОтКлиента;
	ТипЗначения  = Тип("ДокументСсылка.ВозвратТоваровОтКлиента");
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	ОбъектСсылка = ПолучитьСсылку(ДанныеВозврата.id, Менеджер, Отказ, ЭтоНовый);
		
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый Тогда
		
		Объект                 = Менеджер.СоздатьДокумент();
		УстановитьСсылкуНового(Объект, Менеджер, ДанныеВозврата.id);
		
		РеквизитыПриСоздании = Новый Структура();
		РеквизитыПриСоздании.Вставить("Номер",           ДанныеВозврата.num);
		РеквизитыПриСоздании.Вставить("Дата",            ДатаJSON(ДанныеВозврата.created_date));
		РеквизитыПриСоздании.Вставить(
			"WMS_СкладскаяОперация", 
			Очередь.СкладскаяОперация
		);
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыПриСоздании);
		
		Объект.Заполнить(РаспоряжениеСсылка);
		
	Иначе
		Объект                 = ОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	#КонецОбласти

	#Область ОбновлениеШапкиОбъекта 
	// Обновляемые данные
	ДанныеШапкиИзменились = Ложь;
	
	ОбновляемыеРеквизиты = Новый Структура;
	ОбновляемыеРеквизиты.Вставить("СпособКомпенсации", Перечисления.СпособыКомпенсацииВозвратовТоваров.ОставитьВКачествеАванса);
	ОбновляемыеРеквизиты.Вставить("СуммаДокумента",    ДанныеВозврата.sum);
	// Запишем реквизиты
	ЗаписатьОбновляемыеРеквизиты(Объект, ОбновляемыеРеквизиты, ДанныеШапкиИзменились, Отказ);
	#КонецОбласти
	
	#Область Обновление_ТЧ_Товары 
	МассивСтрокТЧ = ДанныеВозврата.items;
	Если ТипЗнч(МассивСтрокТЧ) = Тип("Массив") И МассивСтрокТЧ.Количество() Тогда
		
		// Создадим Кэш с теми же колонками что и у ТЧ документа
		Кэш = Объект.Товары.Выгрузить();
		Кэш.Очистить();
		
		// Заполним кэш товаров
		Для Каждого СтруктураСтрокиТЧ Из МассивСтрокТЧ Цикл  
			
			Если Не ТипЗнч(СтруктураСтрокиТЧ) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Номенклатура = СоздатьНайти_Номенклатуру(СтруктураСтрокиТЧ.item, Отказ);
			
			Если НЕ ЗначениеЗаполнено(Номенклатура) Или Отказ Тогда
				Продолжить;
			КонецЕсли; 
			
			РеквизитыСтроки = Новый Структура;
			РеквизитыСтроки.Вставить("Количество",         СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("КоличествоУпаковок", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("Цена",               СтруктураСтрокиТЧ.cnt);
			РеквизитыСтроки.Вставить("Сумма",              СтруктураСтрокиТЧ.sum);
			РеквизитыСтроки.Вставить("СуммаНДС",           СтруктураСтрокиТЧ.sum_nds);
			РеквизитыСтроки.Вставить("СтавкаНДС",          ВернутьСтавкуНДСПоЧислу(СтруктураСтрокиТЧ.nds));
			РеквизитыСтроки.Вставить("Номенклатура",       Номенклатура);
			РеквизитыСтроки.Вставить("Упаковка",           СоздатьНайти_УпаковкаЕдиницыХраненияОстатков(
																Номенклатура,
																Номенклатура.ЕдиницаИзмерения,
																СтруктураСтрокиТЧ.unit
															)
			);
			
			СтрокиВЗаказе = РаспоряжениеСсылка.ВозвращаемыеТовары.НайтиСтроки(
				Новый Структура("Номенклатура, Упаковка", РеквизитыСтроки.Номенклатура, РеквизитыСтроки.Упаковка)
				);
			Если СтрокиВЗаказе.Количество() Тогда
				КодСтроки = СтрокиВЗаказе[0].КодСтроки;
				ДокументРеализации = СтрокиВЗаказе[0].ДокументРеализации;
			Иначе
				КодСтроки = 0;
				ДокументРеализации = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
			КонецЕсли; 	
			РеквизитыСтроки.Вставить("КодСтроки", КодСтроки);
			РеквизитыСтроки.Вставить("ДокументРеализации", ДокументРеализации);
			
			НоваяСтрока = Кэш.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыСтроки);
			
		КонецЦикла;
		
		// Дозаполним необходимые данные
		Если Кэш.Количество() Тогда
			УчетНДСУП.СкорректироватьСтавкуНДСВТЧДокумента(Объект, Кэш);
		КонецЕсли; 
		
		// Проверим, изменились ли данные
		ДанныеТЧИзменились = Не ОбщегоНазначения.КоллекцииИдентичны(
				Объект.Товары,
				Кэш,
				"Номенклатура, Упаковка, КоличествоУпаковок"
			);
		
		Если ДанныеТЧИзменились Тогда
			Объект.Товары.Загрузить(Кэш);
			//Объект.ЗаполнитьЭтапыГрафикаОплаты();
		КонецЕсли; 
		
	КонецЕсли;
	#КонецОбласти

	#Область ЗаписьИпроведение 
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый ИЛИ ДанныеШапкиИзменились ИЛИ ДанныеТЧИзменились Тогда
		Если ЗаписатьДокументВИБ(Объект) Тогда
			WMS_РаботаСоСтатусами.УстановитьСтатусДокумента(
				Объект,
				Объект,
				Перечисления.WMS_СтатусыДокументов.Обработан
			);
		КонецЕсли; 
	КонецЕсли;
	#КонецОбласти
	
	Возврат Объект.Ссылка;
	
КонецФункции

Функция СоздатьНайти_ПересчетТоваров(ДанныеПересчета, Очередь, Отказ) // w08.01
	ЭтоНовый  = Ложь;
	
	#Область ПолучениеОбъекта 
	// Поиск и создание документа
 	Менеджер     = Документы.ПересчетТоваров;
	ТипЗначения  = Тип("ДокументСсылка.ПересчетТоваров");
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	ОбъектСсылка = ПолучитьСсылку(ДанныеПересчета.id, Менеджер, Отказ, ЭтоНовый);
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый Тогда
		Объект                 = Менеджер.СоздатьДокумент();
		УстановитьСсылкуНового(Объект, Менеджер, ДанныеПересчета.id);
		
		РеквизитыПриСоздании = Новый Структура();
		РеквизитыПриСоздании.Вставить("Номер",           ДанныеПересчета.num);
		РеквизитыПриСоздании.Вставить("Дата",            ДатаJSON(ДанныеПересчета.created_date));
		РеквизитыПриСоздании.Вставить("Организация",	 СоздатьНайти_Организация(ДанныеПересчета.organization_id));
		РеквизитыПриСоздании.Вставить("Склад",	 		 СоздатьНайти_Склад(ДанныеПересчета.store));
		РеквизитыПриСоздании.Вставить("Статус",			 Перечисления.СтатусыПересчетовТоваров.Подготовлено);
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыПриСоздании);
	Иначе
		Объект                 = ОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	#КонецОбласти

	#Область ОбновлениеШапкиОбъекта 
	// Обновляемые данные
	ДанныеШапкиИзменились = Ложь;
	
	ОбновляемыеРеквизиты = Новый Структура;
	ОбновляемыеРеквизиты.Вставить("УчетныеДанныеЗаполнены", 	Истина);
	// Запишем реквизиты
	ЗаписатьОбновляемыеРеквизиты(Объект, ОбновляемыеРеквизиты, ДанныеШапкиИзменились, Отказ);
	#КонецОбласти
	
	#Область Обновление_ТЧ_Товары 
	МассивСтрокТЧ = ДанныеПересчета.items;
	Если ТипЗнч(МассивСтрокТЧ) = Тип("Массив") И МассивСтрокТЧ.Количество() Тогда
		
		// Создадим Кэш с теми же колонками что и у ТЧ документа
		Кэш = Объект.Товары.Выгрузить();
		Кэш.Очистить();
		
		// Заполним кэш товаров
		Для Каждого СтруктураСтрокиТЧ Из МассивСтрокТЧ Цикл  
			Если Не ТипЗнч(СтруктураСтрокиТЧ) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Номенклатура = СоздатьНайти_Номенклатуру(СтруктураСтрокиТЧ.item, Отказ);
			Если НЕ ЗначениеЗаполнено(Номенклатура) Или Отказ Тогда
				Продолжить;
			КонецЕсли; 
			
			РеквизитыСтроки = Новый Структура;
			РеквизитыСтроки.Вставить("Количество",         СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("КоличествоУпаковок", СтруктураСтрокиТЧ.qty);
			РеквизитыСтроки.Вставить("Номенклатура",       Номенклатура);
			РеквизитыСтроки.Вставить("Упаковка",           СоздатьНайти_УпаковкаЕдиницыХраненияОстатков(
																Номенклатура,
																Номенклатура.ЕдиницаИзмерения,
																СтруктураСтрокиТЧ.unit
															)
			);
			
			НоваяСтрока = Кэш.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыСтроки);
			
		КонецЦикла;
		
		// Проверим, изменились ли данные
		ДанныеТЧИзменились = Не ОбщегоНазначения.КоллекцииИдентичны(
				Объект.Товары,
				Кэш,
				"Номенклатура, Упаковка, КоличествоУпаковок"
			);
		
		Если ДанныеТЧИзменились Тогда
			Объект.Товары.Загрузить(Кэш);
		КонецЕсли; 
		
	КонецЕсли;
	#КонецОбласти

	#Область ЗаписьИпроведение 
	Если Отказ Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Если ЭтоНовый ИЛИ ДанныеШапкиИзменились ИЛИ ДанныеТЧИзменились Тогда
		Если ЗаписатьДокументВИБ(Объект) Тогда
			WMS_РаботаСоСтатусами.УстановитьСтатусДокумента(
				Объект,
				Объект,
				Перечисления.WMS_СтатусыДокументов.Обработан
			);
		КонецЕсли; 
	КонецЕсли;
	#КонецОбласти
	
	Возврат Объект.Ссылка;
	
КонецФункции //СоздатьНайти_ПересчетТоваров

#КонецОбласти

#Область СоздатьНайти_Справочник 

Функция СоздатьНайти_Организация(ИдОрганизации)
	
	Идентификатор         = Новый УникальныйИдентификатор(ИдОрганизации);
	ОрганизацияСсылка = Справочники.Организации.ПолучитьСсылку(Идентификатор);
	ОрганизацияСсылкаНайден = ОрганизацияСсылка.ВерсияДанных <> "            ";

	Если Не ОрганизацияСсылкаНайден Тогда
		ТипЗначения = Тип("СправочникСсылка.Организации");
		Менеджер = Справочники.Организации;
		
		ОрганизацияОбъект                       = Менеджер.СоздатьЭлемент();
		УстановитьСсылкуНового(ОрганизацияОбъект, Менеджер, Идентификатор);
		
		ОрганизацияОбъект.Наименование          = "НОВАЯ ОРГАНИЗАЦИЯ";
				
		Если ЗаписатьОбъектВИБ(ОрганизацияОбъект) Тогда
			ОрганизацияСсылка                   = ОрганизацияОбъект.Ссылка;
		Иначе
			Возврат Менеджер.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;

	Возврат ОрганизацияСсылка;
	
КонецФункции

Функция СоздатьНайти_Контрагента(СтруктураКонтрагента, Отказ = Ложь)
	ПустойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	Если Отказ ИЛИ (Не ТипЗнч(СтруктураКонтрагента)   = Тип("Структура")) Тогда
		ДанныеПротокола = "Ошибка при создании контрагента не правильная структура";
		ЗаписатьДанныеПротокола(ДанныеПротокола, Отказ);
		Возврат ПустойКонтрагент;
	КонецЕсли; 

	// поиск контрагентов осуществляется по доп. реквизиту!
	Идентификатор         = СтруктураКонтрагента["id"];
	КонтрагентСсылка = НайтиКонтрагента_ПоДопРеквизиту(Идентификатор, Отказ);
	Если Отказ Тогда
		ДанныеПротокола = "Ошибка при создании контрагента """ + СтруктураКонтрагента.name + """. ";
		ЗаписатьДанныеПротокола(ДанныеПротокола, Отказ);
		Возврат ПустойКонтрагент;
	КонецЕсли; 
	
	КонтрагентСсылкаНайден = Не КонтрагентСсылка.Пустая();
	
	Если Не КонтрагентСсылкаНайден Тогда
		
		КонтрагентОбъект                           = Справочники.Контрагенты.СоздатьЭлемент();
		
		КонтрагентОбъект.Наименование              = СтруктураКонтрагента.name;
		КонтрагентОбъект.НаименованиеПолное 	   = СтруктураКонтрагента.fname;
		КонтрагентОбъект.ИНН		               = СтруктураКонтрагента.inn;
		КонтрагентОбъект.КПП	                   = СтруктураКонтрагента.kpp;
		КонтрагентОбъект.ЮрФизЛицо = ?(СтруктураКонтрагента.isip,
				Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,
				Перечисления.ЮрФизЛицо.ЮрЛицо
				);
		КонтрагентОбъект.ЮридическоеФизическоеЛицо = ?(
				КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,
				Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
				Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
				);		
		
		Если ЗаписатьОбъектВИБ(КонтрагентОбъект) Тогда
			КонтрагентСсылка                       = КонтрагентОбъект.Ссылка;
			
			// Запись свойства поиска 
			ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
			ТаблицаДопРеквизитов.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
			ТаблицаДопРеквизитов.Колонки.Добавить("Значение");
			
			СвойствоПоиска = ТаблицаДопРеквизитов.Добавить();
			СвойствоПоиска.Свойство = СвойствоПоискаКонтрагента();
			СвойствоПоиска.Значение = СокрЛП(Идентификатор);
			
			УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(КонтрагентСсылка, ТаблицаДопРеквизитов);
			
		Иначе
			ДанныеПротокола = "Ошибка при записи контрагента """ + СтруктураКонтрагента.name + """. ";
			ЗаписатьДанныеПротокола(ДанныеПротокола, Отказ);
			Возврат ПустойКонтрагент;
		КонецЕсли;
		
	Иначе
		КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	// Обновление
	ОбъектИзменился = Ложь;
	Если КонтрагентОбъект.Партнер.Пустая() ИЛИ Истина Тогда   // временно - всегда обновляем 
		ОбъектИзменился = Истина;
		
		ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
		ПартнерОбъект.Наименование = КонтрагентОбъект.Наименование;
		ПартнерОбъект.НаименованиеПолное = КонтрагентОбъект.НаименованиеПолное;
		ПартнерОбъект.Клиент = Истина;
		ПартнерОбъект.Поставщик = Истина;
		ПартнерОбъект.ПрочиеОтношения = Истина;
		ПартнерОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
		Если КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		Иначе
			ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		КонецЕсли;
		ПартнерОбъект.Комментарий = НСтр("ru = '#Создан автоматически при переносе в WMS'");
		
		Если ЗаписатьОбъектВИБ(ПартнерОбъект) Тогда
			КонтрагентОбъект.Партнер = ПартнерОбъект.Ссылка;
			ДанныеПротокола = "Контрагенту присвоен партнер """ + СтруктураКонтрагента.name + """. ";
			ЗаписатьДанныеПротокола(ДанныеПротокола);
		Иначе
			Отказ = Истина;
			ДанныеПротокола = "Ошибка при создании партнера """ + СтруктураКонтрагента.name + """. ";
			ЗаписатьДанныеПротокола(ДанныеПротокола, Отказ);
		КонецЕсли;
	
	КонецЕсли; 
	
	Если 
		Не Отказ И (Не КонтрагентСсылкаНайден Или ОбъектИзменился) Тогда
		
		Если ЗаписатьОбъектВИБ(КонтрагентОбъект) Тогда
			КонтрагентСсылка = КонтрагентОбъект.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонтрагентСсылка;

КонецФункции

Функция СоздатьНайти_Склад(СтруктураСклада, Отказ = Ложь)
	
	ПустойСклад                            = Справочники.Склады.ПустаяСсылка();

	Если Не ТипЗнч(СтруктураСклада)        = Тип("Структура") Тогда
		Возврат ПустойСклад;
	КонецЕсли;

	Идентификатор         = Новый УникальныйИдентификатор(СтруктураСклада["id"]);
	СкладСсылка = Справочники.Склады.ПолучитьСсылку(Идентификатор);
	СкладСсылкаНайден = СкладСсылка.ВерсияДанных <> "            ";

	Если Не СкладСсылкаНайден Тогда
		Отказ = Истина;
		Возврат ПустойСклад;
	КонецЕсли;

	Возврат СкладСсылка;

КонецФункции

Функция СоздатьНайти_ПодразделениеКакСклад(СтруктураСклада, ДопПараметры = Неопределено)
	
	ПустоеПодразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	ИспользоватьПодразделения = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	
	Если Не ТипЗнч(СтруктураСклада)   = Тип("Структура")
		Или НЕ ИспользоватьПодразделения Тогда
		Возврат ПустоеПодразделение;
	КонецЕсли;

	Идентификатор         = Новый УникальныйИдентификатор(СтруктураСклада["id"]);

	ПодразделениеСсылка = Справочники.СтруктураПредприятия.ПолучитьСсылку(Идентификатор);
	ПодразделениеСсылкаНайден = ПодразделениеСсылка.ВерсияДанных <> "            ";

	ЭтоНовый = Ложь;
	Если Не ПодразделениеСсылкаНайден Тогда
		ЭтоНовый = Истина;
		
		ТипЗначения = Тип("СправочникСсылка.СтруктураПредприятия");
		Менеджер = Справочники.СтруктураПредприятия;
		
		ПодразделениеОбъект                       = Менеджер.СоздатьЭлемент();
		УстановитьСсылкуНового(ПодразделениеОбъект, Менеджер, Идентификатор);
		
		ПодразделениеОбъект.Наименование          = СтруктураСклада.name;
				
		Если ЗаписатьОбъектВИБ(ПодразделениеОбъект) Тогда
			ПодразделениеСсылка                   = ПодразделениеОбъект.Ссылка;
		Иначе
			Возврат ПустоеПодразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодразделениеСсылка;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти


#Область ВыгрузкаОбъектов

#Область ПолучениеИзмененныхОбъектов

Процедура ОбработатьМусорВУзле(МассивОбъектов, ВидОбъекта) 
	
	ДанныеПротокола = "Есть мусор в узле, пока не обрабатываем: " + МассивОбъектов.Количество() + " - объектов " + ВидОбъекта;
	ЗаписатьДанныеПротокола(ДанныеПротокола, Ложь);
	
КонецПроцедуры

Функция ПолучитьМассивИзмененныхДокументов(Очередь)
	
	ИмяДокумента = Очередь.ОбъектМетаданных;
	
	МассивЗаказов = Новый Массив;
	МассивНесоотвЗаказов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументИзменения.Ссылка,
		|	ДокументИзменения.НомерСообщения,
		|	WMS_СтатусыДокументовСрезПоследних.Статус
		|ИЗ
		|	Документ." + ИмяДокумента + ".Изменения КАК ДокументИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.WMS_СтатусыДокументов.СрезПоследних КАК WMS_СтатусыДокументовСрезПоследних
		|		ПО ДокументИзменения.Ссылка = WMS_СтатусыДокументовСрезПоследних.Документ
		|ГДЕ
		|	ДокументИзменения.Узел = &Узел";
	
	// Отбор по скл. операции
	Если ЗначениеЗаполнено(Очередь.СкладскаяОперация) Тогда
		Запрос.Текст = Запрос.Текст+ "
		|	И ДокументИзменения.Ссылка.WMS_СкладскаяОперация = &WMS_СкладскаяОперация";
		Запрос.УстановитьПараметр("WMS_СкладскаяОперация", Очередь.СкладскаяОперация);
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Узел", Узел);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументСсылка = Выборка.Ссылка;
		
		Если ДокументСсылка.ПометкаУдаления
			Или Выборка.Статус <> Перечисления.WMS_СтатусыДокументов.ГотовКВыгрузке Тогда
			МассивНесоотвЗаказов.Добавить(ДокументСсылка);			
		    Продолжить;
		КонецЕсли;
		
		МассивЗаказов.Добавить(ДокументСсылка);
		
	КонецЦикла;
	
	Если МассивНесоотвЗаказов.Количество() Тогда
		ОбработатьМусорВУзле(МассивНесоотвЗаказов, ИмяДокумента);
	КонецЕсли; 
	
	Возврат МассивЗаказов;

КонецФункции // ПолучитьМассивИзмененныхЗаказов()

#КонецОбласти

Функция ВыгрузитьИзмененныеОбъекты(Очередь)
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Отказ = Истина;
		Возврат 0;
	КонецЕсли; 	
	
	МассивОбъектовДляВыгрузки = ПолучитьМассивИзмененныхДокументов(Очередь);
	КоличествоОбъектов = МассивОбъектовДляВыгрузки.Количество();
	Если КоличествоОбъектов = 0  Тогда
		Возврат 0;
	КонецЕсли;
	
	// Создаем соединение с Rabbit 
	Соединение = НовоеСоединение(Узел, Отказ);
	Если Отказ Тогда
		Возврат 0;
	КонецЕсли;
	
	// Создание модели
	Модель = Соединение.CreateModel();
	
	// Отправка измененных заказов
	МассивПереданныхОбъектов = Новый Массив;
	Для Каждого ИзмененныйОбъект Из МассивОбъектовДляВыгрузки  Цикл
		
		Результат = ОтправитьНовоеСообщение(
			ИзмененныйОбъект,
			Модель,
			Очередь
		);
			
		Если Результат Тогда
			МассивПереданныхОбъектов.Добавить(ИзмененныйОбъект);
		КонецЕсли;
		
	КонецЦикла; 
	
	// Закрываем соединение с Rabbit
	Модель.Close();
	Соединение.Close();	
	
	// Удаляем регистрацию переданных заказов
	СтатусВыгружен = Перечисления.WMS_СтатусыДокументов.Выгружен;
	
	Для Каждого ПереданныйОбъект Из МассивПереданныхОбъектов Цикл
		// Установить статус - выгружен
		Отказ = Ложь;
		WMS_РаботаСоСтатусами.УстановитьСтатусДокумента(
			ПереданныйОбъект,
			ПереданныйОбъект,
			СтатусВыгружен,
			Отказ
		);
		Если Не Отказ Тогда
			ДанныеПротокола = "Выгружен: " + ПереданныйОбъект + ", новый статус """  + СтатусВыгружен + """."; 
			ЗаписатьДанныеПротокола(ДанныеПротокола);
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ПереданныйОбъект);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат МассивПереданныхОбъектов.Количество()-1;  // Возвращаем кол-во переданных объектов;
	
КонецФункции

#Область Выгрузка_ФормированиеСтруктур

Функция СформироватьСтруктуру(Источник, Очередь) Экспорт
	
	ИмяОчереди = Очередь.ИмяОчереди; 
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		СтруктураИсточника = СформироватьСтруктуруЗаказаПоставщику(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		СтруктураИсточника = СформироватьСтруктуруЗаказаНаПеремещение(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
		СтруктураИсточника = СформироватьСтруктуруЗаказаНаСборку(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		СтруктураИсточника = СформироватьСтруктуруЗаказаКлиента(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		СтруктураИсточника = СформироватьСтруктуруЗаявкаНаВозвратТоваровОтКлиента(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		СтруктураИсточника = СформироватьСтруктуруПересчетТоваров(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		СтруктураИсточника = СформироватьСтруктуруЗаказНаВнутреннееПотребление(Источник);

		//
	КонецЕсли; 
	
	Возврат Сериализовать(СтруктураИсточника);
	
КонецФункции // СформироватьСтруктуру()

Функция СформироватьСтруктуруЗаказаНаПеремещение(Источник)
	
	СтруктураЗаказа = Новый Структура();
	СтруктураЗаказа.Вставить("id",                 XMLСтрока(Источник.Ссылка.УникальныйИдентификатор()) );
	СтруктураЗаказа.Вставить("store_recipient_id", XMLСтрока(Источник.СкладПолучатель.УникальныйИдентификатор()) );
	СтруктураЗаказа.Вставить("store_sender_id",    XMLСтрока(Источник.СкладОтправитель.УникальныйИдентификатор()) );
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПоступления", Источник);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	ТоварыКПоступлению.Склад КАК Склад,
	|	СУММА(ТоварыКПоступлению.КОформлениюНакладныхПоРаспоряжениюОстаток) КАК КОформлениюНакладныхПоРаспоряжению
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления = &ДокументПоступления) КАК ТоварыКПоступлению
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Склад
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКПоступлению.КОформлениюНакладныхПоРаспоряжениюОстаток) > 0
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	МассивТоваров = Новый Массив();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураСтрокиТовар = Новый Структура();
		СтруктураСтрокиТовар.Вставить("item_id",XMLСтрока(Выборка.Номенклатура.УникальныйИдентификатор()) );
		СтруктураСтрокиТовар.Вставить("qty",    Выборка.КОформлениюНакладныхПоРаспоряжению);
		
		МассивТоваров.Добавить(СтруктураСтрокиТовар);
	КонецЦикла; 
	
	СтруктураЗаказа.Вставить("items", МассивТоваров);
	Возврат СтруктураЗаказа;
	
КонецФункции // СформироватьСтруктуруЗаказаПоставщику()

Функция СформироватьСтруктуруЗаказаПоставщику(Источник)
	
	СтруктураЗаказа	= Новый Структура();
	СтруктураЗаказа.Вставить("id",            	XMLСтрока(Источник.Ссылка.УникальныйИдентификатор()));
	СтруктураЗаказа.Вставить("sum", 			Источник.СуммаДокумента);
	//СтруктураЗаказа.Вставить("store",			СформироватьБазовуюСтруктуруСклада(Источник.Склад));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПоступления", Источник);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	ТоварыКПоступлению.Склад КАК Склад,
	|	СУММА(ТоварыКПоступлению.КОформлениюОрдеровОстаток) КАК КОформлениюОрдеров,
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоОрдерамОстаток) КАК КОформлениюПоступленийПоОрдерам
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления = &ДокументПоступления) КАК ТоварыКПоступлению
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Склад
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКПоступлению.КОформлениюПоступленийПоОрдерамОстаток) > 0
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	МассивТоваров = Новый Массив();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураСтрокиТовар = Новый Структура();
		СтруктураСтрокиТовар.Вставить("item_id",XMLСтрока(Выборка.Номенклатура.УникальныйИдентификатор()) );
		СтруктураСтрокиТовар.Вставить("qty",    Выборка.КОформлениюПоступленийПоОрдерам);
		
		МассивТоваров.Добавить(СтруктураСтрокиТовар);
	КонецЦикла; 
	СтруктураЗаказа.Вставить("items", МассивТоваров);
	
	Возврат СтруктураЗаказа;
	
КонецФункции // СформироватьСтруктуруЗаказаПоставщику()

Функция СформироватьСтруктуруЗаказаНаСборку(Источник)
	
	СтруктураЗаказа	= Новый Структура();
	
	// Считаем, сколько принято по заказу
	Принято = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПоступления", Источник);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	ТоварыКПоступлению.Склад КАК Склад,
	|	СУММА(ТоварыКПоступлению.КОформлениюОрдеровРасход) КАК Принято
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(, , , , ДокументПоступления = &ДокументПоступления) КАК ТоварыКПоступлению
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Склад
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКПоступлению.КОформлениюОрдеровРасход) > 0
	|";
	
	ВыборкаПринято = Запрос.Выполнить().Выбрать();
	Если ВыборкаПринято.Следующий() Тогда
		СтруктураЗаказа.Вставить(
			"id", XMLСтрока(Источник.Ссылка.УникальныйИдентификатор())
		);
		СтруктураЗаказа.Вставить(
			"received_item_id",
			XMLСтрока(ВыборкаПринято.Номенклатура.УникальныйИдентификатор())
		);
		СтруктураЗаказа.Вставить("received_qty", ВыборкаПринято.Принято);
		
		Принято = Истина;
	
	КонецЕсли; 
	
	Если Не Принято Тогда
		Возврат СтруктураЗаказа;
	КонецЕсли;
	
	// Считаем сколько отгружено по заказу
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПоступления", Источник);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	СУММА(ТоварыКОтгрузке.КОтгрузкеРасход) КАК Отгружено
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(, , , , ДокументОтгрузки = &ДокументПоступления) КАК ТоварыКОтгрузке
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузке.ДокументОтгрузки,
	|	ТоварыКОтгрузке.Номенклатура,
	|	ТоварыКОтгрузке.Склад
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОтгрузке.КОтгрузкеРасход) > 0
	|";
	ВыборкаОтгружено = Запрос.Выполнить().Выбрать();
	
	МассивТоваров = Новый Массив();
	Пока ВыборкаОтгружено.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаОтгружено.Номенклатура) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураСтрокиТовар = Новый Структура();
		СтруктураСтрокиТовар.Вставить(
			"item_id", 
			XMLСтрока(ВыборкаОтгружено.Номенклатура.УникальныйИдентификатор())
		);
		СтруктураСтрокиТовар.Вставить("qty", ВыборкаОтгружено.Отгружено);
		
		МассивТоваров.Добавить(СтруктураСтрокиТовар);
	КонецЦикла; 
	СтруктураЗаказа.Вставить("items", МассивТоваров);
	
	Возврат СтруктураЗаказа;
	
КонецФункции // СформироватьСтруктуруЗаказаНаСборку()

Функция СформироватьСтруктуруЗаказаКлиента(Источник)
	
	СтруктураЗаказа	= Новый Структура();
	СтруктураЗаказа.Вставить("id",            	XMLСтрока(Источник.Ссылка.УникальныйИдентификатор()));
	СтруктураЗаказа.Вставить("store_id",        XMLСтрока(Источник.Склад.УникальныйИдентификатор()));
	СтруктураЗаказа.Вставить("sum", 			Источник.СуммаДокумента);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОтгрузки", Источник);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	СУММА(ТоварыКОтгрузке.КОформлениюОстаток) КАК Оформить
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки = &ДокументОтгрузки) КАК ТоварыКОтгрузке
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузке.ДокументОтгрузки,
	|	ТоварыКОтгрузке.Номенклатура,
	|	ТоварыКОтгрузке.Склад
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОтгрузке.КОформлениюОстаток) > 0";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	МассивТоваров = Новый Массив();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураСтрокиТовар = Новый Структура();
		СтруктураСтрокиТовар.Вставить("item_id",XMLСтрока(Выборка.Номенклатура.УникальныйИдентификатор()) );
		СтруктураСтрокиТовар.Вставить("qty",    Выборка.Оформить);
		
		МассивТоваров.Добавить(СтруктураСтрокиТовар);
	КонецЦикла; 
	СтруктураЗаказа.Вставить("items", МассивТоваров);
	
	Возврат СтруктураЗаказа;
	
КонецФункции // СформироватьСтруктуруЗаказаКлиента()

Функция СформироватьСтруктуруЗаявкаНаВозвратТоваровОтКлиента(Источник)
	
	СтруктураЗаказа	= Новый Структура();
	СтруктураЗаказа.Вставить("id",            	XMLСтрока(Источник.Ссылка.УникальныйИдентификатор()));
	СтруктураЗаказа.Вставить("sum", 			Источник.СуммаДокумента);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПоступления", Источник);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	ТоварыКПоступлению.Склад КАК Склад,
	|	СУММА(ТоварыКПоступлению.КОформлениюОрдеровРасход) КАК Принято
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(, , , , ДокументПоступления = &ДокументПоступления) КАК ТоварыКПоступлению
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Склад
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКПоступлению.КОформлениюОрдеровРасход) > 0
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивТоваров = Новый Массив();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураСтрокиТовар = Новый Структура();
		СтруктураСтрокиТовар.Вставить("item_id",XMLСтрока(Выборка.Номенклатура.УникальныйИдентификатор()) );
		СтруктураСтрокиТовар.Вставить("qty",    Выборка.Принято);
		
		МассивТоваров.Добавить(СтруктураСтрокиТовар);
	КонецЦикла; 
	СтруктураЗаказа.Вставить("items", МассивТоваров);
	
	Возврат СтруктураЗаказа;
	
КонецФункции // СформироватьСтруктуруЗаявкаНаВозвратТоваровОтКлиента()

Функция СформироватьСтруктуруПересчетТоваров(Источник)
	
	СтруктураЗаказа	= Новый Структура();
	СтруктураЗаказа.Вставить("id",            	XMLСтрока(Источник.Ссылка.УникальныйИдентификатор()));
	СтруктураЗаказа.Вставить("store_id",        XMLСтрока(Источник.Склад.УникальныйИдентификатор()));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Источник", Источник.Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ТабТовары.КоличествоФакт) КАК КоличествоФакт
	|ИЗ
	|	Документ.ПересчетТоваров.Товары КАК ТабТовары
	|ГДЕ
	|	ТабТовары.Ссылка = &Источник
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабТовары.Номенклатура";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивТоваров = Новый Массив();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураСтрокиТовар = Новый Структура();
		СтруктураСтрокиТовар.Вставить("item_id",XMLСтрока(Выборка.Номенклатура.УникальныйИдентификатор()) );
		СтруктураСтрокиТовар.Вставить("qty",    Выборка.КоличествоФакт);
		
		МассивТоваров.Добавить(СтруктураСтрокиТовар);
	КонецЦикла; 
	СтруктураЗаказа.Вставить("items", МассивТоваров);
	
	Возврат СтруктураЗаказа;
	
КонецФункции // СформироватьСтруктуруПересчетТоваров()

Функция СформироватьСтруктуруЗаказНаВнутреннееПотребление(Источник)
	
	СтруктураЗаказа = Новый Структура();
	СтруктураЗаказа.Вставить("id",      XMLСтрока(Источник.Ссылка.УникальныйИдентификатор()) );
	СтруктураЗаказа.Вставить("store", 	XMLСтрока(Источник.Склад.УникальныйИдентификатор()) );
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОтгрузки", Источник);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	СУММА(ТоварыКОтгрузке.КОформлениюОстаток) КАК Оформить
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки = &ДокументОтгрузки) КАК ТоварыКОтгрузке
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузке.ДокументОтгрузки,
	|	ТоварыКОтгрузке.Номенклатура,
	|	ТоварыКОтгрузке.Склад
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОтгрузке.КОформлениюОстаток) > 0";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	МассивТоваров = Новый Массив();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураСтрокиТовар = Новый Структура();
		СтруктураСтрокиТовар.Вставить("item_id",XMLСтрока(Выборка.Номенклатура.УникальныйИдентификатор()) );
		СтруктураСтрокиТовар.Вставить("qty",    Выборка.Оформить);
		
		МассивТоваров.Добавить(СтруктураСтрокиТовар);
	КонецЦикла; 
	
	СтруктураЗаказа.Вставить("items", МассивТоваров);
	Возврат СтруктураЗаказа;
	
КонецФункции // СформироватьСтруктуруЗаказНаВнутреннееПотребление()

#КонецОбласти

#КонецОбласти


#Область Создание_Номенклатуры 

Функция СоздатьНайти_ВидНоменклатуры(СтруктураВида)
	ПустойВид = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	
	Если Не ТипЗнч(СтруктураВида) = Тип("Структура") Тогда
		Возврат ПустойВид;
	КонецЕсли;

	Идентификатор = Новый УникальныйИдентификатор(СтруктураВида["id"]);

	ВидСсылка = Справочники.ВидыНоменклатуры.ПолучитьСсылку(Идентификатор);
	ВидНайден = ВидСсылка.ВерсияДанных <> "            ";

	ЭтоНовый = Ложь;
	Если Не ВидНайден Тогда
		ЭтоНовый = Истина;
		
		ТипЗначения = Тип("СправочникСсылка.ВидыНоменклатуры");
		Менеджер = Справочники.ВидыНоменклатуры;
		
		ВидОбъект                         = Менеджер.СоздатьЭлемент();
		УстановитьСсылкуНового(ВидОбъект, Менеджер, Идентификатор);
		
		ВидОбъект.Наименование            = СтруктураВида.name;
		ВидОбъект.ТипНоменклатуры   	  = ?(СтруктураВида.type = "Товар",
												Перечисления.ТипыНоменклатуры.Товар,
												Перечисления.ТипыНоменклатуры.Услуга
											);
		ВидОбъект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		ВидОбъект.ИспользоватьУпаковки = Истина;
		ВидОбъект.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры");
				
		Если ЗаписатьОбъектВИБ(ВидОбъект) Тогда
			ВидСсылка                     = ВидОбъект.Ссылка;
		Иначе
			Возврат ПустойВид;
		КонецЕсли;
	Иначе
		
		ВидОбъект = ВидСсылка.ПолучитьОбъект();
		
	КонецЕсли;
	
	// Обновление
	ОбъектИзменился = Ложь;
	
	Если ЭтоНовый ИЛИ ОбъектИзменился Тогда
		Если ЗаписатьОбъектВИБ(ВидОбъект) Тогда
			ВидСсылка = ВидОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидСсылка;

КонецФункции

Функция СоздатьНайти_СкладскуюГруппу(НоменклатураСсылка)
	
	// Складская группа номенклатуры
	СкладскаяГруппаНоменклатурыСсылка = Справочники.СкладскиеГруппыНоменклатуры.НайтиПоНаименованию(СокрЛП(НоменклатураСсылка.Код), Истина);
	
	// Используем код т.к. наименование всего 50 символов
	Если СкладскаяГруппаНоменклатурыСсылка.Пустая() Тогда
		// Создаем складскую группу для номенклатуры собственную, по наименованию
		
		СкладскаяГруппаНоменклатурыОбъект = Справочники.СкладскиеГруппыНоменклатуры.СоздатьЭлемент();
		СкладскаяГруппаНоменклатурыОбъект.Наименование = СокрЛП(НоменклатураСсылка.Код);
		СкладскаяГруппаНоменклатурыОбъект.ТипНоменклатуры = НоменклатураСсылка.ТипНоменклатуры;
		СкладскаяГруппаНоменклатурыОбъект.ОграничиватьПоОбъему = Истина;
		СкладскаяГруппаНоменклатурыОбъект.ОграничиватьПоВесу = Ложь;
		СкладскаяГруппаНоменклатурыОбъект.Описание = СокрЛП(НоменклатураСсылка.Артикул) + ", " + СокрЛП(НоменклатураСсылка.Наименование);
		СкладскаяГруппаНоменклатурыОбъект.Записать();
		
		СкладскаяГруппаНоменклатурыСсылка = СкладскаяГруппаНоменклатурыОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат СкладскаяГруппаНоменклатурыСсылка ;
	
КонецФункции

Функция СоздатьНайти_СкладскуюГруппуУпаковок()
	
	ПустаяГруппаУпаковок = Справочники.СкладскиеГруппыУпаковок.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СкладскиеГруппыУпаковок.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СкладскиеГруппыУпаковок КАК СкладскиеГруппыУпаковок";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат ПустаяГруппаУпаковок;
	
КонецФункции

Функция СоздатьНайти_Номенклатуру(СтруктураНоменклатуры, Отказ, ПринудительноОбновить = Ложь)
	
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	#Область ПоискИСоздание
	Если Отказ Тогда
		Возврат ПустаяНоменклатура;
	КонецЕсли; 
	
	Если Не ТипЗнч(СтруктураНоменклатуры)   = Тип("Структура") Тогда
		Возврат ПустаяНоменклатура;
	КонецЕсли;

	Идентификатор = Новый УникальныйИдентификатор(СтруктураНоменклатуры["id"]);

	НоменклатураСсылка = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
	НоменклатураНайден = НоменклатураСсылка.ВерсияДанных <> "            ";

	Если Не НоменклатураНайден Тогда
		
		ТипЗначения = Тип("СправочникСсылка.Номенклатура");
		Менеджер = Справочники.Номенклатура;
		
		НоменклатураОбъект                         = Менеджер.СоздатьЭлемент();
		УстановитьСсылкуНового(НоменклатураОбъект, Менеджер, Идентификатор);
		
		НоменклатураОбъект.Наименование            = СтруктураНоменклатуры.name;
		НоменклатураОбъект.НаименованиеПолное 	   = СтруктураНоменклатуры.fname;
				
		Если ЗаписатьОбъектВИБ(НоменклатураОбъект) Тогда
			НоменклатураСсылка                     = НоменклатураОбъект.Ссылка;
		Иначе
			Возврат ПустаяНоменклатура;
		КонецЕсли;
	Иначе
		
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ОбновлениеРеквизитов 
	ОбъектИзменился = Ложь;
	
	// Обновление артикула
	Если Не НоменклатураОбъект.Артикул = СтруктураНоменклатуры.art 
		И Не ПустаяСтрока(СтруктураНоменклатуры.art) Тогда
		НоменклатураОбъект.Артикул = СтруктураНоменклатуры.art;
		ОбъектИзменился = Истина;
	КонецЕсли;

	// Обновление ВидаНоменклатуры
	Если НоменклатураОбъект.ВидНоменклатуры.Пустая() Тогда
		НоменклатураОбъект.ВидНоменклатуры = СоздатьНайти_ВидНоменклатуры(
													СтруктураНоменклатуры.kind
													);
		Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(НоменклатураОбъект, Ложь);
											
		ОбъектИзменился = Истина;	
	КонецЕсли; 
	
	// Обновление иерархии
	Родитель = СоздатьНайти_ИерархиюНоменклатуры(СтруктураНоменклатуры.groups);
	Если Не Родитель = НоменклатураОбъект.Родитель  Тогда
		НоменклатураОбъект.Родитель = Родитель;
		ОбъектИзменился = Истина;
	КонецЕсли;
	
	// Обновление складской группы
	Если Не ЗначениеЗаполнено(НоменклатураОбъект.СкладскаяГруппа) Тогда
		НоменклатураОбъект.СкладскаяГруппа = СоздатьНайти_СкладскуюГруппу(НоменклатураОбъект.Ссылка);
		ОбъектИзменился = Истина;
	КонецЕсли;	
	
	// Обновление ед. хранения
	ЕдиницаХраненияОстатков = СоздатьНайти_ЕдиницуХраненияОстатков(СтруктураНоменклатуры.store_unit);
	Если Не ЕдиницаХраненияОстатков = НоменклатураОбъект.ЕдиницаИзмерения  Тогда
		НоменклатураОбъект.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
		ОбъектИзменился = Истина;
	КонецЕсли;
	
	#Область ОбновлениеВесоГабаритныхХарактеристик 
	СтруктураЕдХранения = СтруктураНоменклатуры.store_unit;
	Вес = СтруктураЕдХранения.weight;
	Объем = ?(СтруктураЕдХранения.volume = 0, 1, СтруктураЕдХранения.volume);
	
	НужноОбновлятьВесОбъем = ПринудительноОбновить Или 
		(Не НоменклатураОбъект.ВесЧислитель = Вес) Или
		(Не НоменклатураОбъект.ОбъемЧислитель = Объем);
	
	Если НужноОбновлятьВесОбъем Тогда
		
		// Заполним реквизиты ед. хранения в номенклатуре
		НоменклатураОбъект.ВесИспользовать = Вес > 0;
		Если НоменклатураОбъект.ВесИспользовать Тогда
			НоменклатураОбъект.ВесЕдиницаИзмерения = Константы.ЕдиницаИзмеренияВеса.Получить();
			НоменклатураОбъект.ВесЧислитель = Вес;
			НоменклатураОбъект.ВесЗнаменатель = 1;
			НоменклатураОбъект.ВесМожноУказыватьВДокументах = Истина;
		КонецЕсли;
		
		// Заполняем объем, если объем не передан, то исходим от 1дм3
		НоменклатураОбъект.ОбъемИспользовать = Объем > 0; 
		Если НоменклатураОбъект.ОбъемИспользовать Тогда
			НоменклатураОбъект.ОбъемЕдиницаИзмерения = Константы.ЕдиницаИзмеренияОбъема.Получить();
			НоменклатураОбъект.ОбъемЧислитель = Объем;
			НоменклатураОбъект.ОбъемЗнаменатель = 1;
			НоменклатураОбъект.ОбъемМожноУказыватьВДокументах = Истина;
			// Габариты
			НоменклатураОбъект.ДлинаИспользовать = Истина;
			НоменклатураОбъект.ДлинаЕдиницаИзмерения = Константы.ЕдиницаИзмеренияДлины.Получить();
			НоменклатураОбъект.ДлинаЧислитель = Exp( (1 / 3) * Log (Объем) );
			НоменклатураОбъект.ДлинаЗнаменатель = 1;
		КонецЕсли;
		
		ОбъектИзменился = Истина;
	КонецЕсли;
	#КонецОбласти
		
	// Обновление ставки НДС
	СтавкаНДС = ВернутьСтавкуНДСПоЧислу(СтруктураНоменклатуры.nds);
	Если Не СтавкаНДС = НоменклатураОбъект.СтавкаНДС Тогда
		НоменклатураОбъект.СтавкаНДС = СтавкаНДС;
		ОбъектИзменился = Истина;;
	КонецЕсли;
	#КонецОбласти
	
	#Область Запись 
	Если Не НоменклатураНайден ИЛИ ОбъектИзменился Тогда
		Если ЗаписатьОбъектВИБ(НоменклатураОбъект) Тогда
			НоменклатураСсылка = НоменклатураОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	// После записи создаем упаковку
	Если СодержитДанные(ЕдиницаХраненияОстатков) Тогда
		СоздатьНайти_УпаковкаЕдиницыХраненияОстатков(НоменклатураСсылка, ЕдиницаХраненияОстатков, СтруктураНоменклатуры.store_unit, ПринудительноОбновить);
	КонецЕсли; 
	
	// Запись штрих-кодов
	Загрузить_ШтрихКодыНоменклатуры(НоменклатураСсылка, СтруктураНоменклатуры.barcodes);
	
	Возврат НоменклатураСсылка;

КонецФункции

Функция СоздатьОбновить_Номенклатуру(СтруктураНоменклатуры, Очередь, Отказ)
	Возврат СоздатьНайти_Номенклатуру(СтруктураНоменклатуры, Отказ, Истина);	
КонецФункции

Функция СоздатьНайти_ШтрихКодНоменклатуры(Владелец, СтруктураШтрихКода)
	
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Не ТипЗнч(СтруктураШтрихКода)   = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Упаковка = СоздатьНайти_УпаковкаЕдиницыХраненияОстатков(
						Владелец,
						Владелец.ЕдиницаИзмерения,
						СтруктураШтрихКода.store_unit
						);
						
	Если Упаковка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли; 					
	
	// ищем ШК
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
		|	И ШтрихкодыНоменклатуры.Упаковка = &Упаковка";
	
	Запрос.УстановитьПараметр("Номенклатура", Владелец);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		НоваяЗапись = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		НоваяЗапись.Активность = Истина;
		НоваяЗапись.Штрихкод = СтруктураШтрихКода.code;
		НоваяЗапись.Номенклатура = Владелец;
		НоваяЗапись.Упаковка = Упаковка;
		НоваяЗапись.Записать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // СоздатьНайти_ШтрихКодНоменклатуры()

Функция Загрузить_ШтрихКодыНоменклатуры(Владелец, МассивШтрихКодов)
	
	Если Не ТипЗнч(МассивШтрихКодов)   = Тип("Массив") Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Не МассивШтрихКодов.Количество() Тогда
	    Возврат Ложь;
	КонецЕсли; 
	
	// Создаем
	Для Каждого СтруктураШтрихКода Из МассивШтрихКодов Цикл
		СоздатьНайти_ШтрихКодНоменклатуры(Владелец, СтруктураШтрихКода);	
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьНайти_ЕдиницуХраненияОстатков(СтруктураЕдиницы)
	
	ПустаяЕдиница = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	
	Если Не ТипЗнч(СтруктураЕдиницы) = Тип("Структура") Тогда
		Возврат ПустаяЕдиница;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.Владелец = &Владелец
		|	И УпаковкиЕдиницыИзмерения.Код = &Код
		|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения);
	Запрос.УстановитьПараметр("Код", СокрП(СтруктураЕдиницы.okei_code));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		НовыйЭлемент = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
		НовыйЭлемент.Владелец = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения;
		НовыйЭлемент.Код = СокрП(СтруктураЕдиницы.okei_code);
		НовыйЭлемент.Наименование = СтруктураЕдиницы.name;
		НовыйЭлемент.Числитель = 1;
		НовыйЭлемент.Знаменатель = 1;
		Если ЗаписатьОбъектВИБ(НовыйЭлемент) Тогда
			Возврат НовыйЭлемент.Ссылка;
		КонецЕсли;
		
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка; 
	
	КонецЕсли; 
	
КонецФункции

Функция СоздатьНайти_УпаковкаЕдиницыХраненияОстатков(Владелец, БазоваяЕдиница, СтруктураУпаковки, ПринудительноОбновить = Ложь)
	
	ПустаяУпаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();

#Область ПоискСоздание 
	Если Не ТипЗнч(СтруктураУпаковки) = Тип("Структура") Тогда
		Возврат ПустаяУпаковка;
	КонецЕсли;
	
	Если Не СодержитДанные(БазоваяЕдиница)  Тогда
		Возврат ПустаяУпаковка;
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(СтруктураУпаковки["id"]);

	УпаковкаСсылка = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Идентификатор);
	УпаковкаНайден = УпаковкаСсылка.ВерсияДанных <> "            ";

	ЭтоНовый = Ложь;
	Если Не УпаковкаНайден Тогда
		ЭтоНовый = Истина;
		
		ТипЗначения = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения");
		Менеджер = Справочники.УпаковкиЕдиницыИзмерения;
		
		УпаковкаОбъект                       = Менеджер.СоздатьЭлемент();
		УстановитьСсылкуНового(УпаковкаОбъект, Менеджер, Идентификатор);
		
		УпаковкаОбъект.Владелец              = Владелец;
		ЗаполнитьЗначенияСвойств(
				УпаковкаОбъект,
				Владелец,
				"ЕдиницаИзмерения, ВесЕдиницаИзмерения, ОбъемЕдиницаИзмерения"
		);
	Иначе
		УпаковкаОбъект = УпаковкаСсылка.ПолучитьОбъект();
	КонецЕсли;
	#КонецОбласти
	
	ДанныеИзменились = Ложь;
	ОбновляемыеРеквизиты = Новый Структура;
	ОбновляемыеРеквизиты.Вставить("Вес",                   СтруктураУпаковки.weight);

	ОбъемУпаковки        = ?(СтруктураУпаковки.volume = 0, 1, СтруктураУпаковки.volume);
	ОбновляемыеРеквизиты.Вставить("Объем",                 ОбъемУпаковки);
	ОбновляемыеРеквизиты.Вставить("ОбъемЕдиницаИзмерения", Константы.ЕдиницаИзмеренияОбъема.Получить() );
	ОбновляемыеРеквизиты.Вставить("ВесЕдиницаИзмерения",   Константы.ЕдиницаИзмеренияВеса.Получить() );
	ОбновляемыеРеквизиты.Вставить("Числитель",             СтруктураУпаковки.kfc);
	ОбновляемыеРеквизиты.Вставить("Знаменатель",           1);
	ОбновляемыеРеквизиты.Вставить("ТипИзмеряемойВеличины", Перечисления.ТипыИзмеряемыхВеличин.Упаковка);
	ОбновляемыеРеквизиты.Вставить("ТипУпаковки",           Перечисления.ТипыУпаковокНоменклатуры.Конечная);
	ОбновляемыеРеквизиты.Вставить("КоличествоУпаковок",    СтруктураУпаковки.kfc);
	ОбновляемыеРеквизиты.Вставить("СкладскаяГруппа",	   СоздатьНайти_СкладскуюГруппуУпаковок());
	ОбновляемыеРеквизиты.Вставить("Наименование",          Справочники.УпаковкиЕдиницыИзмерения.СформироватьНаименование(
		УпаковкаОбъект.ТипУпаковки,
		УпаковкаОбъект.ЕдиницаИзмерения,
		УпаковкаОбъект.Числитель,
		УпаковкаОбъект.Знаменатель,
		Владелец.ЕдиницаИзмерения
		)
	);
	// Габариты
	Числитель_Куб  = Exp( (1 / 3) * Log (ОбъемУпаковки) );
	ЕдИзмГабаритов = Константы.ЕдиницаИзмеренияДлины.Получить();

	ОбновляемыеРеквизиты.Вставить("ГлубинаЕдиницаИзмерения", ЕдИзмГабаритов);
	ОбновляемыеРеквизиты.Вставить("Глубина",                 Числитель_Куб);

	ОбновляемыеРеквизиты.Вставить("ВысотаЕдиницаИзмерения",  ЕдИзмГабаритов);
	ОбновляемыеРеквизиты.Вставить("Высота",                  Числитель_Куб);

	ОбновляемыеРеквизиты.Вставить("ШиринаЕдиницаИзмерения",  ЕдИзмГабаритов);
	ОбновляемыеРеквизиты.Вставить("Ширина",                  Числитель_Куб);
	// Запишем реквизиты
	ЗаписатьОбновляемыеРеквизиты(УпаковкаОбъект,             ОбновляемыеРеквизиты, ДанныеИзменились);
	
	Если Не УпаковкаНайден Или ДанныеИзменились Тогда
		Если ЗаписатьОбъектВИБ(УпаковкаОбъект) Тогда
			УпаковкаСсылка  = УпаковкаОбъект.Ссылка;
		Иначе
			Возврат ПустаяУпаковка;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат УпаковкаСсылка;

КонецФункции // СоздатьНайти_УпаковкаЕдиницыХраненияОстатков()
 
Функция СоздатьНайти_ГруппуНоменклатуры(СтруктураИерархии, Родитель)
	
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	Если Не ТипЗнч(СтруктураИерархии)   = Тип("Структура") Тогда
		Возврат ПустаяНоменклатура;
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(СтруктураИерархии["id"]);
	
	ГруппаСсылка = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
	ГруппаНайден = ГруппаСсылка.ВерсияДанных <> "            ";

	Если Не ГруппаНайден Тогда
		ТипЗначения = Тип("СправочникСсылка.Номенклатура");
		Менеджер = Справочники.Номенклатура;
		
		ГруппаОбъект                         = Менеджер.СоздатьГруппу();
		УстановитьСсылкуНового(ГруппаОбъект, Менеджер, Идентификатор);
		
		ГруппаОбъект.Наименование            = СтруктураИерархии.name;
		Если ЗначениеЗаполнено(Родитель) Тогда
			ГруппаОбъект.Родитель = Родитель;
		КонецЕсли; 
		
		Если ЗаписатьОбъектВИБ(ГруппаОбъект) Тогда
			ГруппаСсылка                     = ГруппаОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ГруппаСсылка;
	
КонецФункции // СоздатьНайти_ГруппуНоменклатуры()
 
Функция СоздатьНайти_ИерархиюНоменклатуры(МассивИерархии)
	
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	Если Не ТипЗнч(МассивИерархии)   = Тип("Массив") Тогда
		Возврат ПустаяНоменклатура;
	КонецЕсли;
	
	Если Не МассивИерархии.Количество() Тогда
		Возврат ПустаяНоменклатура;
	КонецЕсли; 
	
	// От последнего к первому
	Родитель = ПустаяНоменклатура;
	
	ИндексПоследнего = МассивИерархии.ВГраница();
	Для Индекс = -ИндексПоследнего По 0 Цикл
		
		СтруктураГруппы = МассивИерархии[-Индекс];
		
		ГруппаСсылка = СоздатьНайти_ГруппуНоменклатуры(СтруктураГруппы, Родитель); 
		
		Родитель = ГруппаСсылка;
		
	КонецЦикла; 
	
	Возврат ГруппаСсылка;
	
КонецФункции

#КонецОбласти


#Область РаботаС_JSON 

Функция Десериализовать(ТелоЗапросаJSON, Отказ)
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТелоЗапросаJSON);
	
	Данные = ПрочитатьJSON(ЧтениеJSON);
	Если ТипЗнч(Данные) = Тип("Массив") И Данные.Количество() Тогда
		Возврат Данные;
	ИначеЕсли ТипЗнч(Данные) = Тип("Структура") Тогда
		Возврат Данные;
	Иначе
		ТекстОшибки = "Передан пустой массив заказов";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // Десериализовать()

Функция Сериализовать(Структура)
		
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Структура);
	СериализованнаяСтрока = ЗаписьJSON.Закрыть();		
	
	Возврат СериализованнаяСтрока;
	
КонецФункции

#КонецОбласти


#Область ОбщиеМетоды

// Процедура записывает данные протокола
Процедура ЗаписатьДанныеПротокола(ДанныеПротокола, ЭтоОшибка = Ложь)
	
	// только пустую строку не записываем, все остальное пишем
	Если ДанныеПротокола = "" Тогда
		Возврат;
	КонецЕсли;
	
	ТипСообщения = ?(ЭтоОшибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
		
	ЗаписьЖурналаРегистрации("Обмен данными."+ Строка(Узел.Ссылка), ТипСообщения, , Узел.Ссылка, СокрЛП(ДанныеПротокола));
	#Если Клиент Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ДанныеПротокола;
		Сообщение.Поле = Узел;
		Сообщение.УстановитьДанные();
		Сообщение.Сообщить();
	#КонецЕсли	
	// очищаем данные протокола обмена
	ДанныеПротокола = "";
	
КонецПроцедуры

Функция ВернутьСтавкуНДСПоЧислу(Число) Экспорт
	
	СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Если Число = 10 Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли Число = 18 Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли Число = 20 Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	КонецЕсли; 
	
	Возврат СтавкаНДС;

КонецФункции // ВернутьСтавкуНДСПоЧислу()
 
Функция УстановитьСсылкуНового(Объект, Менеджер, УИ)
	
	Если Не ПустаяСтрока(УИ) Тогда
		НоваяСсылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(УИ));
		Объект.УстановитьСсылкуНового(НоваяСсылка);
	Иначе
		НоваяСсылка = Неопределено;
	КонецЕсли;
	
	Возврат НоваяСсылка;
	
КонецФункции

Функция ПолучитьСсылку(СтрокаИдентификатора, Менеджер, Отказ, ЭтоНовый = Ложь) Экспорт
	
	ПустаяСсылка = Менеджер.ПустаяСсылка(); 
	
	Если ПустаяСтрока(СтрокаИдентификатора) Тогда
		Отказ = Истина;
		Возврат ПустаяСсылка;
	КонецЕсли;
	
	СсылкаПоИдентификатору = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаИдентификатора));
	ЭтоНовый = Не СсылкаПоИдентификатору.ВерсияДанных <> "            ";
	
	Возврат СсылкаПоИдентификатору;

КонецФункции

Функция СвойствоПоискаКонтрагента(ИмяСвойства = "WMS_Идентификатор_2eacac0a46134cde81232b7e34f61535")
	Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", ИмяСвойства);
КонецФункции

Функция НайтиКонтрагента_ПоДопРеквизиту(Идентификатор, Отказ = Ложь)
	
	ПустойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	Свойство = СвойствоПоискаКонтрагента();
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		Отказ = Истина;
		Возврат ПустойКонтрагент;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеквизитыКонтргаента.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты.ДополнительныеРеквизиты КАК РеквизитыКонтргаента
		|ГДЕ
		|	РеквизитыКонтргаента.Свойство = &Свойство
		|	И РеквизитыКонтргаента.Значение = &Значение";
	
	Запрос.УстановитьПараметр("Значение", СокрЛП(Идентификатор));
	Запрос.УстановитьПараметр("Свойство", Свойство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат ПустойКонтрагент;
	
КонецФункции

// Получает и возвращает ссылку на объект по строковому уникальному идентификатору.
//
// Параметры:
//  СтрокаИД - строка уникального идентификатора ссылки.
//  ИмяКласса - имя класса, к которому принадлежит объект (Справочники, Документы  и т.д.).
//  ИмяОбъекта - имя объекта метаданных, ссылку для которого требуется получить.
//
// Возвращаемое значение:
//  Ссылка на объект.
//
Функция ПолучитьСсылкуПоНомеруИДате(ВходящиеПараметры, ИмяКласса, ИмяОбъекта) Экспорт

	Если Не СодержитДанные(ВходящиеПараметры) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если ИмяКласса = "Справочники" Тогда
		
		СсылкаНаОбъект = Неопределено; // Пока не прописано
				
	ИначеЕсли ИмяКласса = "Документы" Тогда
		
		СтруктураПоиска = Новый Структура("Дата, Номер, Контрагент, ВидЗаявки",
			ВходящиеПараметры.ДатаЗаказа,
			ВходящиеПараметры.НомерЗаказа,
			ВходящиеПараметры.Пользователь.TMS_Контрагент,
			Перечисления.TMS_ВидыЗаявокНаПеревозку[СокрЛП(ВходящиеПараметры.ВидЗаявки)]
			);
		
		СсылкаНаОбъект = НайтиЭлементЗапросом(СтруктураПоиска, ИмяОбъекта);
		Если СодержитДанные(СсылкаНаОбъект) Тогда
			Возврат СсылкаНаОбъект;
		КонецЕсли;
		
		// Если передан постфикс номера, то вырезаем  постфикс из номера
		Если ВходящиеПараметры.Свойство("ПостфиксНомера") Тогда
			НомерБезПостфикса = СтрЗаменить(СокрП(ВходящиеПараметры.НомерЗаказа), СокрЛП(ВходящиеПараметры.ПостфиксНомера), "");
			СтруктураПоиска = Новый Структура("Дата, Номер, Контрагент, ВидЗаявки",
					ВходящиеПараметры.ДатаЗаказа,
					НомерБезПостфикса,// Номер - постфикс
					ВходящиеПараметры.Пользователь.TMS_Контрагент,
					Перечисления.TMS_ВидыЗаявокНаПеревозку[СокрЛП(ВходящиеПараметры.ВидЗаявки)]
				);
			
			СсылкаНаОбъект = НайтиЭлементЗапросом(СтруктураПоиска, ИмяОбъекта);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;

КонецФункции

Функция НайтиЭлементЗапросом(СвойстваПоиска, ИмяОбъекта)
	
	КоличествоСвойствДляПоиска = СвойстваПоиска.Количество();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ %ИмяОбъекта% КАК Объект
	|ГДЕ
	|	";
	
	ЗапросПоиска       = Новый Запрос();
	
	Индекс = 0;
	Для Каждого Свойство Из СвойстваПоиска Цикл
		Индекс = Индекс  +1;
		
		ИмяПараметра      = Свойство.Ключ;
		ЗначениеПараметра = Свойство.Значение;
		ЗапросПоиска.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);
		
		Если Не ИмяПараметра = "Дата" Тогда
			ТекстЗапроса  = ТекстЗапроса + "Объект." + ИмяПараметра + " = &" + ИмяПараметра;
		Иначе
			ТекстЗапроса  = ТекстЗапроса + "Объект." + ИмяПараметра + " МЕЖДУ НАЧАЛОПЕРИОДА(&" + ИмяПараметра + ", ДЕНЬ) И КОНЕЦПЕРИОДА(&" + ИмяПараметра + ", ДЕНЬ)";
		КонецЕсли;
		
		Если Не Индекс = КоличествоСвойствДляПоиска Тогда 
			ТекстЗапроса = ТекстЗапроса + "
			|	И ";
		КонецЕсли;
		
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяОбъекта%", "Документ." + ИмяОбъекта);
	
	ЗапросПоиска.Текст = ТекстЗапроса;
	Результат = ЗапросПоиска.Выполнить();
			
	Если Результат.Пустой() Тогда
		
		Возврат Неопределено;
								
	Иначе
		
		// Возвращаем первый найденный объект.
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СсылкаНаОбъект = Выборка.Ссылка;
				
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция ВернутьРеализациюПоЗаказу(ЗаказСсылка)
	
	ПустаяСсылка = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(ЗаказСсылка) Тогда
		Возврат ПустаяСсылка;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказКлиента";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПустаяСсылка;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЕсли;
	

КонецФункции // ВернутьРеализациюПоЗаказу()
 
Функция ПолучитьДатуВремяИзСтроки(ДатаВремя) Экспорт
	
	Результат = Неопределено;
	ДатаВремя = СтрЗаменить(ДатаВремя, "-", "");
	ДатаВремя = СтрЗаменить(ДатаВремя, ":", "");
	Если СтрДлина(ДатаВремя) - Найти(ДатаВремя, " ") = 5 Тогда // время в формате Ч:ММ:СС
		ДатаВремя = СтрЗаменить(ДатаВремя, " ", "0");
	ИначеЕсли Найти(ДатаВремя, "T") > 0 Тогда //время в формате ГГГГММДДTЧЧММСС
		ДатаВремя = СтрЗаменить(ДатаВремя, "T", "");
	Иначе // время в формате ЧЧ:ММ:СС
		ДатаВремя = СтрЗаменить(ДатаВремя, " ", "");
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	Результат = ОписаниеТипа.ПривестиЗначение(ДатаВремя);  // дата и время в виде "ГГГГММДДЧЧММСС"
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = ОписаниеТипа.ПривестиЗначение(Лев(ДатаВремя, 8));  // только дата "ГГГГММДД"
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ДатаJSON(СтрДата)
	
	ВозврДата = Дата(1,1,1);
	Если ПустаяСтрока(СтрДата) Тогда
		СтрДата = XMLСтрока(Дата(1,1,1));
	КонецЕсли;
	
	ВозврДата = XMLЗначение(Тип("Дата"), СтрДата);
	Возврат ВозврДата;
	
КонецФункции

Функция ЗаписатьОбъектВИБ(Объект)
		
	Попытка
		
		//УстановитьОбменДаннымиЗагрузка(Объект);
		Объект.Записать();
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка: (" + Объект + ") Описание:" + ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаписатьДокументВИБ(ДокументОбъект, ЧисловойПрефиксНомер = 0)

	Ошибка = Не ДокументОбъект.ПроверитьЗаполнение();
	Если Не Ошибка Тогда
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибки = "Ошибка при проведении документа: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Если СтрЧислоВхождений(ТекстОшибки, "поля ""Номер"" не уникально") > 0 Тогда
				ЧисловойПрефиксНомер = ЧисловойПрефиксНомер + 1;
				ДокументОбъект.Номер = СокрЛП(СтрЗаменить(ДокументОбъект.Номер, "-", "")) + "/" + ЧисловойПрефиксНомер;
				ЗаписатьДокументВИБ(ДокументОбъект, ЧисловойПрефиксНомер);
			КонецЕсли;	
			Ошибка = Истина;
			ЗаписатьДанныеПротокола(ТекстОшибки, Ошибка);
		КонецПопытки;
	КонецЕсли;
	
	Если Ошибка Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
КонецФункции // ЗаписатьДокументВИБ()
 
Функция СодержитДанные(ЗначениеДляПроверки) Экспорт
	Результат = Ложь;
	
	Если ЗначениеДляПроверки <> Неопределено Тогда
		Если ТипЗнч(ЗначениеДляПроверки) = Тип("ТаблицаЗначений")
			Или ТипЗнч(ЗначениеДляПроверки) = Тип("Массив") 
			Или ТипЗнч(ЗначениеДляПроверки) = Тип("СписокЗначений") 
			Тогда
			
			Если ЗначениеДляПроверки.Количество() > 0 Тогда
				Результат = Истина;
			КонецЕсли;
			
		Иначе
			Результат = ЗначениеЗаполнено(ЗначениеДляПроверки);
		КонецЕсли
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция ЗаписатьОбновляемыеРеквизиты(Объект, ОбновляемыеРеквизиты, ДанныеИзменились = Ложь, Отказ = Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Для Каждого Реквизит из ОбновляемыеРеквизиты Цикл 
		
		ИмяРеквизита = Реквизит.Ключ;
		ЗначениеРеквизита = Реквизит.Значение; 
		
		Если Не ПустаяСтрока(ИмяРеквизита) Тогда
			Попытка
				КэшРеквизита = Объект[ИмяРеквизита];
				Если КэшРеквизита <> ЗначениеРеквизита Тогда
					Объект[ИмяРеквизита] = ЗначениеРеквизита;
					ДанныеИзменились = Истина;
				КонецЕсли; 
			Исключение
			КонецПопытки;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Работа_с_командами 

Процедура ОтправитьОшибкиЖРНаПочту() Экспорт
	
	УровниРегистрацииОшибок = Новый Массив;
 	УровниРегистрацииОшибок.Добавить(УровеньЖурналаРегистрации.Ошибка);
	УровниРегистрацииОшибок.Добавить(УровеньЖурналаРегистрации.Предупреждение);
	УровниРегистрацииОшибок.Добавить(УровеньЖурналаРегистрации.Информация);
	
	ФильтрЖурнала = Новый Структура;
	ФильтрЖурнала.Вставить("Уровень",       УровниРегистрацииОшибок);
	ФильтрЖурнала.Вставить("ДатаНачала",    НачалоДня(ТекущаяДата()));
	ФильтрЖурнала.Вставить("ДатаОкончания", КонецДня(ТекущаяДата())) ;
	ФильтрЖурнала.Вставить("Данные", 		Узел) ;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешниеДанные = Новый ТаблицаЗначений;	
	ВыгрузитьЖурналРегистрации(ВнешниеДанные, ФильтрЖурнала);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ВнешниеДанные.Количество() = 0 Тогда
	  Возврат;
	КонецЕсли;
	
	ТабДок                              = Новый ТабличныйДокумент;
	Построитель                         = Новый ПостроительОтчета();
	Построитель.ИсточникДанных          = Новый ОписаниеИсточникаДанных(ВнешниеДанные);
	Построитель.ВыводитьЗаголовокОтчета = Ложь;
	Построитель.Вывести(ТабДок );
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
	ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
	
	ОтправитьОповещениеОтветственномуЛицу(
		"Письмо сформировано автоматически, отвечать на него не нужно...",
		"События обмена " + СтрокаСоединенияИнформационнойБазы() + " на " + КонецДня(ТекущаяДата()),
		"rus.buoc@gmail.com",
		ИмяФайла
	); 		
		
КонецПроцедуры

Функция ОтправитьОповещениеОтветственномуЛицу(Тело, Тема, Кому, ПутьКФайлуВложения = "") экспорт   
	УстановитьПривилегированныйРежим(Истина);	
	
	УчетнаяЗаписьИзНастроек = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому", Кому);
	ПараметрыПисьма.Вставить("АдресОтвета", "itagroupspb@gmail.com");
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", Тело);
	
	Вложения = Новый Структура;
	Вложения.Вставить("Файл", ПутьКФайлуВложения);
	
	ПараметрыПисьма.Вставить("Вложения", 	Вложения );
	ПараметрыПисьма.Вставить("ТипТекста",  	ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст"));
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗаписьИзНастроек, ПараметрыПисьма);
	Исключение
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
КонецФункции

Процедура ИсправитьПартнеров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиента.Контрагент КАК Контрагент,
	|	ЗаказКлиента.Контрагент.Партнер КАК КонтрагентПартнер,
	|	ЗаказКлиента.Партнер КАК Партнер,
	|	ЗаказКлиента.Проведен КАК Проведен
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Партнер = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", Справочники.Партнеры.ПустаяСсылка());
	Результат = Запрос.Выполнить();
	
	СтрокаРезультата = Результат.Выбрать();
	Пока СтрокаРезультата.Следующий() Цикл
		
		Объект1с = СтрокаРезультата.Ссылка.ПолучитьОбъект();
		
		КонтрагентСсылка = СтрокаРезультата.Контрагент;
		
		Если ЗначениеЗаполнено(СтрокаРезультата.КонтрагентПартнер) Тогда
			Объект1с.Партнер = СтрокаРезультата.КонтрагентПартнер;
		Иначе
			ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
			ПартнерОбъект.Наименование = КонтрагентСсылка.Наименование;
			ПартнерОбъект.НаименованиеПолное = КонтрагентСсылка.НаименованиеПолное;
			ПартнерОбъект.Клиент = Истина;
			ПартнерОбъект.Поставщик = Истина;
			ПартнерОбъект.ПрочиеОтношения = Истина;
			ПартнерОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
			Если КонтрагентСсылка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
			Иначе
				ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
			КонецЕсли;
			ПартнерОбъект.Комментарий = НСтр("ru = '#Создан автоматически при переносе в WMS'");
			ПартнерОбъект.Записать();
			
			КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
			КонтрагентОбъект.Партнер = ПартнерОбъект.Ссылка;
			КонтрагентОбъект.Записать();
			
			Объект1с.Партнер = ПартнерОбъект.Ссылка;
		КонецЕсли;	
		
		Объект1с.Записать(РЕжимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти